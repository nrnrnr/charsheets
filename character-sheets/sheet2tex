#!/usr/bin/env lua5.1
--------------------------------------------------------------------------
-- yaml-to-dndtex.lua   â€’  Convert character-sheet YAML to LaTeX macros
-- Usage:   lua yaml-to-dndtex.lua  file.yaml   > file.tex
--          cat file.yaml | lua yaml-to-dndtex.lua   > file.tex
--------------------------------------------------------------------------

local lyaml  = require "lyaml"

-- -----------------------------------------------------------------------
-- 0.  Make sure we have a load_all() helper
-- -----------------------------------------------------------------------
local yaml_load_all
if lyaml.load_all then
  yaml_load_all = lyaml.load_all          -- native API present
else
  -- Fallback: wrap single-document loader so we still return a list
  yaml_load_all = function(str)
    local ok, doc = pcall(lyaml.load, str)
    if not ok then
      error("lyaml.load failed: "..tostring(doc))
    end
    return { doc }
  end
end

---------------------------------------------------------------------------
-- 1. TeX-escaping utility
---------------------------------------------------------------------------
local tex_escape_map = {
  ["\\"] = "\\textbackslash{}",
  ["&"]  = "\\&",
  ["%"]  = "\\%",
  ["$"]  = "\\$",
  ["#"]  = "\\#",
  ["_"]  = "\\_",
  ["{"]  = "\\{",
  ["}"]  = "\\}",
  ["~"]  = "\\textasciitilde{}",
  ["^"]  = "\\textasciicircum{}",
}
local function escape (s)
  return (tostring(s):gsub("[\\&%%$#_{}~^]", tex_escape_map))
end

---------------------------------------------------------------------------
-- 2. Canonical key order for ATTACK records
---------------------------------------------------------------------------
local ATTACK_ORDER = { "NAME", "ATTACK", "DAMAGE", "TYPE", "RANGE", "AMMO" }
local ATTACK_INDEX = {}
for i,k in ipairs(ATTACK_ORDER) do ATTACK_INDEX[k] = i end

local function keys_in_canonical_order (record, canon_index)
  local ordered, extras = {}, {}
  for k in pairs(record) do
    if canon_index[k] then
      ordered[#ordered+1] = k
    else
      extras[#extras+1]  = k
    end
  end
  table.sort(ordered, function(a,b) return canon_index[a] < canon_index[b] end)
  table.sort(extras)
  for _,k in ipairs(extras) do ordered[#ordered+1] = k end
  return ordered
end

local function keyformat(key)
  return (key:gsub('%&', '+'))
end

---------------------------------------------------------------------------
-- 3. Rendering helpers
---------------------------------------------------------------------------
local function render_simple_kv (key, val)
  return ("\\setDND{%s}{%s}"):format(keyformat(key), escape(val))
end

local function render(v)
  if type(v) == 'string' then
    return escape(v)
  elseif type(v) ~= 'table' then
    return tostring(v)
  else
    if v.proficiencies_skip then
      return [[\profskip]]
    elseif v.Languages then
      return v.Languages
    elseif v.Armor then
      return string.format('%s Armor', v.Armor)
    elseif v.Weapons then
      return string.format('%s Weapons', v.Weapons)
    else
      return 'whut?: ' .. (require 'inspect'.image(v))
    end
  end
end

local function render_item(v)
  local s = render(v)
  if s:find 'profskip' then
    return s
  else
    return ([[\item %s]]):format(s)
  end
end

local function render_item_list (key, list)
  local items = {}
  for _,v in ipairs(list) do
    items[#items+1] = render_item(v)
  end
  return ("\\setDND{%s}{%s}"):format(keyformat(key), table.concat(items, "\n"))
end

local function render_attack_record (rec)
  local parts = {}
  for _,k in ipairs(keys_in_canonical_order(rec, ATTACK_INDEX)) do
    parts[#parts+1] = ("%s={%s}"):format(escape(k), escape(rec[k] or ""))
  end
  return ("\\dndkeys{%s}"):format(table.concat(parts, ","))
end

local function render_generic_record (rec)
  local parts = {}
  for k,v in pairs(rec) do
    parts[#parts+1] = ("%s={%s}"):format(escape(k), escape(v))
  end
  table.sort(parts)
  return ("\\dndkeys{%s}"):format(table.concat(parts, ","))
end

local function render_struct_list (key, list)
  local out = {}
  for _,elem in ipairs(list) do
    if type(elem) ~= "table" then
      out[#out+1] = ("\\item %s"):format(escape(tostring(elem)))
    elseif elem.level and not next(elem, "level") then
      out[#out+1] = ("\\spellslevel{%s}"):format(escape(elem.level))
    elseif elem.name and elem.description and not elem.ATTACK then
      out[#out+1] = ("\\described{%s}{%s}"):format(
                      escape(elem.name), escape(elem.description))
    elseif elem.ATTACK then
      out[#out+1] = render_attack_record(elem)
    else
      out[#out+1] = render_generic_record(elem)
    end
  end
  return ("\\setDND{%s}{%s}"):format(keyformat(key), table.concat(out, "\n"))
end

---------------------------------------------------------------------------
-- 4. Convert a single YAML mapping to LaTeX lines
---------------------------------------------------------------------------
local function convert_mapping (map)
  local lines = {}

  -- Proficiency bonus (strip key after processing)
  local prof = map["PROFICIENCY BONUS"] or map["Proficiency Bonus"]
  if prof then
    local txt = tostring(prof)
    if not txt:match("^[+-]") then txt = "0"..txt end
    lines[#lines+1] =
      ("\\setcounter{proficiency bonus}{%s}"):format(escape(txt))
  end

  -- Iterate in original order if lyaml preserved it (omap style)
  local keys = {}
  if map.n and map[1] and type(map[1])=="table" and map[1][1] then
    for i=1,map.n do keys[#keys+1] = map[i][1] end
  else
    for k in pairs(map) do keys[#keys+1] = k end
    table.sort(keys)               -- fallback: deterministic but arbitrary
  end

  for _,k in ipairs(keys) do
    if k ~= "PROFICIENCY BONUS" and k ~= "Proficiency Bonus" then
      local v = map[k]
      local t = type(v)
      if t=="string" or t=="number" or t=="boolean" then
        lines[#lines+1] = render_simple_kv(k, tostring(v))
      elseif t=="table" then
        if #v > 0 and (type(v[1])=="string" or type(v[1])=="number") then
          lines[#lines+1] = render_item_list(k, v)
        else
          lines[#lines+1] = render_struct_list(k, v)
        end
      end
    end
  end
  return table.concat(lines, "\n")
end

---------------------------------------------------------------------------
-- 5. Entry point
---------------------------------------------------------------------------
local function slurp(filename)
  if filename then
    local f = assert(io.open(filename, "r"))
    local txt = f:read("*a"); f:close(); return txt
  else
    return io.stdin:read("*a")
  end
end

local yaml_text = slurp(arg[1])
for _,doc in ipairs(yaml_load_all(yaml_text)) do
  if type(doc)=="table" then
    io.write(convert_mapping(doc), "\n")
  end
end
