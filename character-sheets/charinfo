#!/usr/bin/env lua5.1
--------------------------------------------------------------------------
-- yaml-to-dndtex.lua   ‒  Convert character-sheet YAML to LaTeX macros
-- Usage:   lua yaml-to-dndtex.lua  file.yaml   > file.tex
--          cat file.yaml | lua yaml-to-dndtex.lua   > file.tex
--------------------------------------------------------------------------

------------------ classic print functions ---------------------
local stringf = string.format
local function printf(...) return io.stdout:write(stringf(...)) end
local function eprintf(...) return io.stderr:write(stringf(...)) end
local function fprintf(fd, ...) return fd:write(stringf(...)) end
local function dief(...) eprintf(...); os.exit(1) end
local function errorf(...) return error(stringf(...)) end
local function runf(...) return os.execute(stringf(...)) end
local function outf(out, ...)
  table.insert(out, stringf(...))
  return out
end
----------------------------------------------------------------

local fields = require 'flags'.parser()
  :bool('standalone as s'):help('emit just definitions, not full file')
  :output_file('output as o'):help('where to write if not stdout')
  :string('type as t', 'silverpine'):help('template for character sheet')
  :bool('verbose as v')
  :string('templates', '/home/nr/etc/dnd/resources/character-sheets')
         :help('directory where character-sheet templates live') 
  :minarg(1)
  :parse(arg)

local vprintf = fields.verbose and eprintf or function() end


local function nonempty(v)
  return type(v) == 'number' or type(v) == 'string' and v:find '%S'
end

local lyaml  = require "lyaml"

-- -----------------------------------------------------------------------
-- 0.  Make sure we have a load_all() helper
-- -----------------------------------------------------------------------
local yaml_load_all
if lyaml.load_all then
  yaml_load_all = lyaml.load_all          -- native API present
else
  -- Fallback: wrap single-document loader so we still return a list
  yaml_load_all = function(str)
    local ok, doc = pcall(lyaml.load, str)
    if not ok then
      error("lyaml.load failed: "..tostring(doc))
    end
    return { doc }
  end
end

---------------------------------------------------------------------------
-- 1. TeX-escaping utility
---------------------------------------------------------------------------
local tex_escape_map = {
--  ["\\"] = [[\textbackslash{}]],
  [' '] = '~',
  ["&"]  = [[\&]],
  ["%"]  = [[\%]],
  ["$"]  = [[\$]],
  ["#"]  = [[\#]],
  ["_"]  = [[\_]],
--  ["{"]  = [[\{]],
--  ["}"]  = [[\}]],
  ["~"]  = [[\textasciitilde{}]],
  ["^"]  = [[\textasciicircum{}]],
}

local minustab = { ['-'] = [[\textminus]] }

local function escape (s)
  return (tostring(s):gsub("[\\&%%$#_{}~^]", tex_escape_map)
                     :gsub('([%s%d])%-(%d)', [[%1\textminus%2]])
                     :gsub("−", [[\textminus{}]])
  )
end

local player_template = [[
\player{%
  name={CLASS{} CHARNAME{} (RACE)},
  spelldc={SPELL_DC},
  passivep={PASSIVE_PERCEPTION},
  description={DESCRIPTION},
  stats={STATS},
  proficiencies={THEPROFICIENCIES},
  other={DMFEATURES{}THEMOTIVATION}
}
]]

local saving_throw_proficiencies = {
  Barbarian = { "Strength", "Constitution" },
  Bard      = { "Dexterity", "Charisma" },
  Cleric    = { "Wisdom", "Charisma" },
  Druid     = { "Intelligence", "Wisdom" },
  Fighter   = { "Strength", "Constitution" },
  Monk      = { "Strength", "Dexterity" },
  Paladin   = { "Wisdom", "Charisma" },
  Ranger    = { "Strength", "Dexterity" },
  Rogue     = { "Dexterity", "Intelligence" },
  Sorcerer  = { "Constitution", "Charisma" },
  Warlock   = { "Wisdom", "Charisma" },
  Wizard    = { "Intelligence", "Wisdom" }
}

local long_upper_stats = { }
do
  for _, stats in pairs(saving_throw_proficiencies) do
    for _, stat in ipairs(stats) do
      long_upper_stats[stat:upper()] = true
    end
  end
end


local function modifier(stat)
  return math.floor((tonumber(stat)-10) / 2.0)
end


local statsstrings = 'STR DEX CON INT WIS CHA'

local function mkstats(doc)
  local saves = { }
  for stat in statsstrings:gmatch '%u+' do
    saves[stat] = ''
  end
  for _, stat in ipairs(saving_throw_proficiencies[doc.CLASS]) do
    saves[stat:sub(1,3):upper()] = [[\*]]
  end
  local stats = { [[\stats]] }
  for stat in statsstrings:gmatch '%u+' do
    table.insert(stats, stringf('{%+d%s}', modifier(assert(doc[stat])), saves[stat]))
  end
  return table.concat(stats, '')
end
                                
  

local function mkplayer(doc)
  doc.CLASS = doc.CLASS or doc['CLASS AND LEVEL']:match '%a+'
  doc.LEVEL = doc.LEVEL or doc['CLASS AND LEVEL']:match '%d+'
  local prof = doc["PROFICIENCY BONUS"] or doc["Proficiency Bonus"]
  if nonempty(doc['CHARACTER NAME']) then
    doc.CHARNAME = doc.CHARNAME or doc['CHARACTER NAME']
  else
    doc.CHARNAME = doc.CHARNAME or [[\]] .. doc.CLASS:lower()
  end
  local profs1, profs2, skip = { }, { }, {}
  local profs = profs1
  for _, p in ipairs(doc.PROFICIENCIES or {}) do
    if type(p) == 'table' and next(p) and next(p):find('skip') then
      if profs == profs1 then
        profs = profs2
      else
        profs = skip
      end
    elseif type(p) == 'string' then
      table.insert(profs, p)
    end
  end
  if not profs2[1] then profs2[1] = '?' end
  doc.THEPROFICIENCIES = stringf('{%s}{%s}', table.concat(profs1, [[\\]]),
                                             table.concat(profs2, [[\\]]))

  if nonempty(doc.MOTIVATION) then
    doc.THEMOTIVATION = doc.THEMOTIVATION or stringf([[\\\emph{%s}]], doc.MOTIVATION)
  else
    doc.THEMOTIVATION = doc.THEMOTIVATION or ''
  end

  doc.DMFEATURES = doc.DMFEATURES or doc.SENSES or ''
  
  doc.DESCRIPTION = doc.DESCRIPTION or ''

  doc.STATS = mkstats(doc)

  doc['SPELL DC'] = doc['SPELL DC'] or ''


  -- make underscores in template work like spaces
  for key in player_template:gmatch '%u+_[%u_]*%u' do
    doc[key] = doc[key] or doc[key:gsub('_', ' ')]
  end

  return player_template:gsub('%u[%u_]*', doc)
end

---------------------------------------------------------------------------
-- 5. Entry point
---------------------------------------------------------------------------
local function slurp(filename)
  if filename then
    local f = assert(io.open(filename, "r"))
    local txt = f:read("*a"); f:close(); return txt
  else
    return io.stdin:read("*a")
  end
end

local function extend(doc)
  local class = doc.CLASS or (doc['CLASS & LEVEL'] or ''):match '%a+' or ''
  doc.CLASS = class
  doc.LEVEL = doc.LEVEL or doc['CLASS & LEVEL']:match '%d+' or nil
  return doc
end

local function contents(filename)
  local f, msg = io.open(filename, 'r')
  if not f then return f, msg end
  local s, msg = f:read '*a'
  if not s then return s, string.format('%s: %s', filename, msg) end
  f:close()
  return s
end

local function set_contents(filename, s)
  local f, msg = io.open(filename, 'w')
  if not f then return f, msg end
  local s = assert(f:write(s))
  f:close()
  return s or true
end

local quote_me = '[^%w%+%-%=%@%_%/%.%:]' -- easier to complement what doesn't need quotes
local strfind = string.find

local function dirname(s) -- also returns basename as second result
  s = s:gsub('/$', '')
  local dir, base = s:match '^(.*)/([^/]*)$'
  if not dir then
    return '.', s
  elseif dir == '' then
    return '/', base
  else
    return dir, base
  end
end


function osquote(s)
  -- Returns string s with whatever markup is needed to quote it 
  -- to the POSIX shell.

  if strfind(s, quote_me) or s == '' then
    return "'" .. string.gsub(s, "'", [['"'"']]) .. "'"
  else
    return s
  end
end

local function fill_template(assignments)
  local pathname = stringf('%s/%s.tex', fields.templates, fields.type)
  local template, msg = contents(pathname)
  if not template then
    eprintf('%s\n', msg)
    os.exit(1)
  else
    local bracketed_splash = stringf('{%s/splash.png}', fields.templates)
    return (template:gsub('\n%s*\\input%b{}', assignments)
                    :gsub('%{splash.png%}', bracketed_splash)
           )
  end
end

local function emit(assignments)
  local output = fields.standalone and assignments or fill_template(assignments)

  if not fields.output then
    io.stdout:write(assignments, '\n')
  elseif fields.output:find '%.tex$' then
    set_contents(fields.output, output)
  elseif fields.output:find '%.pdf$' then
    local tex = fields.output:gsub('%.pdf$', '.tex')
    set_contents(tex, output)
    runf('pdflatex -output-directory %s %s', osquote(dirname(fields.output)), osquote(tex))
  end
end

local function read_docs(arg)
  local docs = { }
  for _, pathname in ipairs(arg) do
    local yaml_text = slurp(pathname)
    for _,doc in ipairs(yaml_load_all(yaml_text)) do
      if type(doc) == 'table' then
        table.insert(docs, extend(doc))
      end
    end
  end
  return docs
end

local function emit_players(docs, low, high)
  for i = low or 1, high or #docs do
    if docs[i] then
      io.stdout:write(mkplayer(docs[i]), '\n\n')
    end
  end
end

require 'tabutil'

local function emit_passive_perceptions(docs)
--  require 'inspect'.show (docs)
  local pps = table.of_tables()
  local have_pps = false
  for _, doc in ipairs(docs) do
    local n = tonumber(doc['PASSIVE PERCEPTION'])
    if n then
      have_pps = true
      table.insert(pps[n], doc.CLASS or '??')
--      require 'inspect'.show {passive = n, nth = pps[n] }
    else
--      require 'inspect'.show(doc)
    end
  end
--  require 'inspect'.show(pps)
  if have_pps then
    local displays = { }
    for pp = 30, 1, -1 do
      if pps[pp][1] then
        table.insert(displays, stringf('%d~(%s)', pp, table.concat(pps[pp], ', ')))
      end
    end
    io.stdout:write('\n\\bigskip\nPassive perceptions: ',
                    table.concat(displays, '; '), '\n\n')
  end
end

require 'tabutil'

local function saveinfo(description, dc)
  local d = description:upper()
  for stat in statsstrings:gmatch '%a+' do
    if d:find ('%A' .. stat .. '%A') then
      return stringf([[(\textsc{%s, DC~%s})]], stat:lower(), dc and tostring(dc) or '?')
    end
  end
  for stat in pairs(long_upper_stats) do
    if d:find ('%A' .. stat .. '%A') then
      return stringf([[(\textsc{%s, DC~%s})]], stat:sub(1,3):lower(), dc and tostring(dc) or '?')
    end
  end

  if dc then
    return stringf([[(DC~%s)]], tostring(dc))
  end
end  
        

local statsstrings = 'STR DEX CON INT WIS CHA'


local non_offensive_spells = { }
do
  local list = { 'Bless', 'Resistance', 'Guidance' }
  for _, spell in ipairs(list) do
    non_offensive_spells[spell] = true
  end
end


local function offensive_spells(docs)

  local function nosuffix(name)
    return (name:gsub('%s-%[.*', ''))
  end


  local attacks = { }
  local saves = { }
  for _, doc in ipairs(docs) do
    for _, spell in ipairs(doc.MAGIC or {}) do
--      require 'inspect'.show(spell)
      if type(spell) == 'table' and spell.name
      and not non_offensive_spells[nosuffix(spell.name)]
      then
        local name = nosuffix(spell.name)
        if spell.description:lower():find 'save'
        or spell.description:lower():find 'saving'
        then
          saves[name] = saveinfo(spell.description, doc['SPELL DC']) or true
        elseif spell.description:lower():find 'damage'
        and spell.description:lower():find 'attack'
        then
          attacks[name] = true
        else
--          eprintf('No category for %s\n', name)
        end
      end
    end
  end

--  require 'inspect'.show { attacks = attacks, saves = saves }

  local template = [[
\bigskip

\emph{\Large Offensive Spells}
\par
\medskip
\noindent
\begin{tabular}{@{}c@{}}
\toprule
\begin{tabular}[t]{@{}e}
\upshape{Attack roll}\\
\midrule
ATTACKS\\
\end{tabular}%
\begin{tabular}[t]{e}
\upshape{Saving throw}\\
\midrule
SAVES\\
\end{tabular}\\
\bottomrule
\end{tabular}


]]



  local col1 = table.sorted_keys(attacks)
  local col2 = table.sorted_keys(saves)

   require 'inspect'.show{ col1 = col1 }
  for i = 1, #col2 do
    col2[i] = stringf('%s %s', col2[i], saves[col2[i]])
  end

  return template:gsub('ATTACKS', table.concat(col1, [[\\]]))
                 :gsub('SAVES', table.concat(col2, [[\\]]))
    


end

local function emit_description_table(header, key, docs)

  local function nosuffix(name)
    return (name:gsub('%s-%[.*', ''))
  end

  local description = { } -- index by name
  for _, doc in ipairs(docs) do
    for _, spell in ipairs(doc[key] or {}) do
      if type(spell) == 'table' and spell.name then
        local name = nosuffix(spell.name)
        local d = description[name] or spell.description
        if #spell.description < #d then
          d = spell.description
        end
        description[name] = d
      end
    end
  end

printf([[{\Large\textit{%s}}]], header)

io.stdout:write [[
\medskip

\noindent
\begingroup
\def\arraystretch{1.2}
\rlap{\begin{tabularx}{2\linewidth}{@{}>{\itshape}l>{\raggedright\arraybackslash}X@{}}
\toprule
\upshape{Name}&
Description\\
\midrule
]]

  for _, key in ipairs(table.sorted_keys(description)) do
    printf([[
%s&%s\\
]], key, escape(description[key]))
  end

io.stdout:write [[
\bottomrule
\end{tabularx}}
\endgroup
]]

end


local main = function(arg)
  local docs = read_docs(arg)
  emit_players(docs, 1, 2)
  emit_passive_perceptions(docs)
  io.stdout:write([[\newpage]], '\n')
  emit_players(docs, 3, 4)
  io.stdout:write(offensive_spells(docs), '\n\n')

  if #docs > 4 then
    io.stdout:write([[\clearpage]], '\n')
    emit_players(docs, 5)
  end

  io.stdout:write([[\clearpage]], '\n')
  emit_description_table('All Spells', 'MAGIC', docs)
  io.stdout:write([[\clearpage]], '\n')
  emit_description_table('Features', 'FEATURES', docs)
end


io.stdout:write [[
\documentclass[12pt,twocolumn]{article}
\usepackage[margin=0.8cm,landscape]{geometry}
\usepackage{times}
\usepackage{tabularx}
\usepackage{dminfo}

\begin{document}

]]

main(arg)

io.stdout:write [[
\end{document}
]]

