\RequirePackage[margin=7mm]{geometry}
\RequirePackage{tikz}
\RequirePackage{times}
\RequirePackage{xcolor}
\RequirePackage{environ}
\RequirePackage{tabularx}
\RequirePackage{booktabs}
\usetikzlibrary{calc}
\usetikzlibrary{positioning}
\usetikzlibrary{shapes}

% Define colors for different sections
\colorlet{stats}{blue!10!white}
\colorlet{proficiencies}{yellow!12!white}
\colorlet{attacks}{orange!25!white}
\colorlet{magic}{red!12!white}
\colorlet{mypurple}{red!40!blue}
\colorlet{features}{magenta!16!white}
\colorlet{playername}{green!90!yellow!8!white}
\colorlet{teal}{blue!40!green}
\colorlet{equipment}{playername}
\colorlet{hpetc}{gray!40!white}

\newif\ifcaster
\casterfalse

% dndbox should create a node

%%  % inside a tikzpicture
%%  \node[minimum width=60mm,   % desired width
%%        minimum height=35mm,  % desired height
%%        inner sep=0pt,        % no extra padding
%%        outer sep=0pt]        % (optional) no extra margin
%%        (MyBox) at (10mm,5mm) {};

\newcommand\dndnode[4]{%
   % name, origin, w, h
  \node[
      anchor=south west,
      rectangle,
      minimum width=#3,   % desired width
      minimum height=#4,  % desired height
      inner sep=0pt,        % no extra padding
      outer sep=0pt]        % (optional) no extra margin
      (#1) at (#2) {};
}

\newcommand\dndnodebox[4]{%
  \dndnode{#1}{#2}{#3}{#4}
  \dndbox{#2}{#3}{#4}
}


% Decorative box macro for D&D character sheets
% Usage: \dndbox{origin}{width}{height}
% where origin may be `x,y` or a coordinate name
\newcommand{\dndbox}[3]{%
  % Parameters: #1 = x,y, #2 = width, #3 = height
  \path (#1) coordinate (dndboxll);
  \dndboxhere{#2}{#3}
}
\newcommand\dndfill[4]{%
  \fill[#4] (#1) +(1mm,1mm) rectangle +(#2-1mm,#3-1mm);
}
\def\south{south}
\newcommand\dndlabeledbox[6][south]{% anchor, add color and label
  \dndfill{#2}{#3}{#4}{#5}
  \dndbox{#2}{#3}{#4}
  \def\anchor{#1}
  \ifx\anchor\south
    \path (#2) ++(#3/2,0mm) node [inner sep=6pt,anchor=#1] {\textsf{#6}};
  \else
    \path (#2) node [inner sep=6pt,anchor=#1] {\textsf{#6}};
  \fi
}
  

\newcommand{\dndboxhere}[2]{%
  \pgfmathsetmacro{\cornersize}{0.15} % Size of corner decorations
  \pgfmathsetmacro{\inset}{0.05} % Inset for inner lines
  
  % Define coordinates
  \path (dndboxll)     coordinate (ll)
             +(#1, 0)  coordinate (lr)
             +(#1, #2) coordinate (ur)
             +(0, #2)  coordinate (ul);
  
  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize)
    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize)
    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize)
    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);
}

\newcommand{\dndboxold}[4]{%
  % Parameters: #1 = x, #2 = y, #3 = width, #4 = height
  \pgfmathsetmacro{\cornersize}{0.15} % Size of corner decorations
  \pgfmathsetmacro{\inset}{0.05} % Inset for inner lines
  
  % Define coordinates
  \coordinate (ll) at (#1, #2);
  \coordinate (lr) at (#1 + #3, #2);
  \coordinate (ul) at (#1, #2 + #4);
  \coordinate (ur) at (#1 + #3, #2 + #4);
  
  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize)
    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize)
    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize)
    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);
}

% dndsection environment - stores parameters for use inside tikzpicture

\newlength\dndtextwidth

\NewEnviron{dndsection}[6]{%
  \begingroup
  \newcommand{\dndsectionx}{#1}%
  \newcommand{\dndsectiony}{#2}%
  \newcommand{\dndsectionwidth}{#3}%
  \newcommand{\dndsectionheight}{#4}%
  \newcommand{\dndsectiontitle}{#5}%
  \newcommand{\dndsectioncolor}{#6}%
  % Fill background
  \fill[\dndsectioncolor] (\dndsectionx + 1mm, \dndsectiony + 1mm) rectangle (\dndsectionx + \dndsectionwidth - 1mm, \dndsectiony + \dndsectionheight - 1mm);
  
  % Draw the decorative box
  \dndbox{\dndsectionx,\dndsectiony}{\dndsectionwidth}{\dndsectionheight}
  
  % Place the title at the bottom center
  \node[font=\footnotesize\scshape, anchor=south] at (\dndsectionx + \dndsectionwidth/2, \dndsectiony + 1mm) {\sffamily {\dndsectiontitle}};
  
  % Calculate minipage width
 \setlength{\dndtextwidth}{\dndsectionwidth}
 \addtolength\dndtextwidth{-2\fboxsep}
 \addtolength\dndtextwidth{-2mm}

  % Place content in a minipage
  \node[anchor=north west, inner sep=0] at (\dndsectionx + \fboxsep + 1mm, \dndsectiony+\dndsectionheight - \fboxsep - 1mm) {%
   \begin{minipage}{\dndtextwidth}%
     \BODY%
   \end{minipage}%
  };
  \endgroup
}

\newlength\leftwidth
\newlength\rightwidth
\leftwidth=6.5cm
\rightwidth=12.8cm
\newlength\rightx
\rightx=7.15cm


% Specific section environments with fixed positions
% Use different body names to avoid conflicts
\environbodyname\attacksbody
\NewEnviron{attackssection}{%
  \ifcaster
    \def\y{152mm}%
    \def\h{26mm}
  \else
    \def\y{129mm}%
    \def\h{49mm}
  \fi  
  \begin{dndsection}{\rightx}{\y}{\rightwidth}{\h}{ATTACKS}{attacks}
    \attacksbody
  \end{dndsection}
}[\ignorespacesafterend]
% y = 128mm for noncasters


\environbodyname\featuresbody

%%\NewEnviron{featuressection}{%  noncaster
%%  \begin{dndsection}{\rightx}{55mm}{\rightwidth}{70mm}{FEATURES}{features}
%%    \featuresbody
%%  \end{dndsection}
%%}[\ignorespacesafterend]
%%

\NewEnviron{featuressection}{%  caster
  \begin{dndsection}{\rightx}{0mm}{\rightwidth}{42mm}{FEATURES}{features}
    \featuresbody
  \end{dndsection}
}[\ignorespacesafterend]


\environbodyname\magicbody  
\NewEnviron{magicsection}{%
  \dndnode{magic}{\rightx,44.5mm}{\rightwidth}{105mm};
  \begin{dndsection}{\rightx}{44.5mm}{\rightwidth}{105mm}{MAGIC}{magic}
    \magicbody
  \end{dndsection}
}[\ignorespacesafterend]

\environbodyname\equipmentbody
\NewEnviron{equipmentsection}{%
  \dndnode{equipment}{0mm,0mm}{68mm}{53mm}
  \begin{dndsection}{0mm}{0mm}{68mm}{53mm}{EQUIPMENT}{equipment}
    \equipmentbody
  \end{dndsection}
}[\ignorespacesafterend]

\environbodyname\proficienciesbody
\NewEnviron{proficienciessection}{%
  \begin{dndsection}{30mm}{55mm}{38mm}{160mm}{PROFICIENCIES}{proficiencies}
    \proficienciesbody
  \end{dndsection}
}[\ignorespacesafterend]



\newenvironment{nobullets}
  {\begin{list}{}{%
      \setlength{\leftmargin}{0pt}% no indentation
      \setlength{\labelwidth}{0pt}%
      \setlength{\labelsep}{0pt}%
      \setlength{\itemindent}{0pt}%
      \setlength{\topsep}{0pt}% space before/after the list
      \setlength{\partopsep}{0pt}%
      \setlength{\parsep}{0pt}%
      \setlength{\itemsep}{0.5\smallskipamount}% space between items
      \renewcommand*{\makelabel}[1]{}% suppress the bullet
  }}%
  {\end{list}}


\newenvironment{featurestab}
  {\renewcommand\arraystretch{1.5}%
   \begin{tabular}{>{\raggedright\arraybackslash\itshape}p{26mm}>{\raggedright\arraybackslash}p{93mm}}}
  {\end{tabular}}

\newenvironment{spellstab}
  {\renewcommand\arraystretch{1.5}%
   \begin{tabular}{>{\raggedright\arraybackslash\itshape}p{26mm}>{\raggedright\arraybackslash}p{93mm}}}
  {\end{tabular}}

\newcommand\cantripsheader{%
  \multicolumn2{l}{\textsf{CANTRIPS}}%
}

\newcommand{\checkboxes}[1]{%
  \begingroup
  \count0=#1\relax
  \loop
    \ifnum\count0>0
      $\circ$\,
      \ifnum\count0>1~\fi
      \advance\count0 by -1
  \repeat
  \endgroup
}

\newcommand\hpetcll{\rightx + 30mm, 184mm}

\newcommand\hpbackground{
  \fill[hpetc] (\hpetcll) coordinate (hpbackground) rectangle +(98mm,44.5mm);
}

\newcommand\spellsheader[2]{%
  \multicolumn2{l}{\textsf{LEVEL~#1 \checkboxes{#2}/day}}%
}


\newenvironment{attackstab}
  {\renewcommand\arraystretch{1.2}%
   \tabcolsep=0.5\tabcolsep
   \small
   \begin{tabular}{@{}cccccc@{}}
   \multicolumn1{@{}l}{\textsf{NAME}}&
   \textsf{ATTACK}&
   \textsf{DAMAGE}&
   \textsf{TYPE}&
   \textsf{RANGE}&
   \textsf{AMMO}\\
   \midrule
  }
  {\end{tabular}}


%-------------------------------------------------------------
%  Shield shape: top made of two quadratic curves, tapered
%  sides meeting at a point.  Works with minimum width/height,
%  inner sep, anchors, etc.
%-------------------------------------------------------------

\pgfdeclareshape{oshield}{
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}

  \backgroundpath{
    \pgf@x=.5\wd\pgfnodeparttextbox   % half width
    \pgf@y=.5\ht\pgfnodeparttextbox   % half height

    \pgfpathmoveto{\pgfqpoint{-\pgf@x}{.3\pgf@y}}
    \pgfpathquadraticcurveto{\pgfqpoint{-\pgf@x}{\pgf@y}}
                       {\pgfqpoint{0pt}{\pgf@y}}
    \pgfpathquadraticcurveto{\pgfqpoint{\pgf@x}{\pgf@y}}
                       {\pgfqpoint{\pgf@x}{.3\pgf@y}}
    \pgfpathlineto{\pgfqpoint{.4\pgf@x}{-.8\pgf@y}}
    \pgfpathlineto{\pgfqpoint{-.4\pgf@x}{-.8\pgf@y}}
    \pgfpathclose
  }
}


\pgfdeclareshape{dddshield}{
  % inherit the standard rectangle anchors so all usual
  % (north, south east, etc.) are available
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}

  \backgroundpath{
    % half-dimensions of the node’s bounding box
    \pgf@x=.5\wd\pgfnodeparttextbox   % ½ width  → \pgf@x
    \pgf@y=.5\ht\pgfnodeparttextbox   % ½ height → \pgf@y

    % start at left “shoulder”
    \pgfpathmoveto{\pgfqpoint{-\pgf@x}{0pt}}

    % top left curve → top centre
    \pgfpathquadraticcurveto
        {\pgfqpoint{-\pgf@x}{\pgf@y}}
        {\pgfqpoint{0pt}{\pgf@y}}

    % top right curve → right “shoulder”
    \pgfpathquadraticcurveto
        {\pgfqpoint{\pgf@x}{\pgf@y}}
        {\pgfqpoint{\pgf@x}{0pt}}

    % taper down to the point
    \pgfpathlineto{\pgfqpoint{0pt}{-.8\pgf@y}}

    \pgfpathclose
  }
}


\pgfdeclareshape{halfshieldx}{
  % gain all the usual rectangle anchors (center, north, east, …):
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}

  \backgroundpath{
    % half-width of the text box → radius for the (approximate) half-circle
    \pgf@x=.5\wd\pgfnodeparttextbox   % r = \pgf@x
    % baseline is y = 0
    %
    % left end of baseline
    \pgfpathmoveto{\pgfqpoint{-\pgf@x}{0pt}}
    % single quadratic Bézier up to apex (control at centre top) and down
    \pgfpathquadraticcurveto
        {\pgfqpoint{0pt}{\pgf@x}}     % control point at (0 , r)
        {\pgfqpoint{\pgf@x}{0pt}}     % right end of baseline
    % close → draws the straight baseline back to the start
    \pgfpathclose
  }
}


\pgfdeclareshape{halfshieldyyyy}{
  % keep the ordinary rectangle anchors
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}

  \backgroundpath{
    % --- radius R ----------------------------------------------------
    % Start with half the text width, then honour inner sep
    \pgf@x=.5\wd\pgfnodeparttextbox             % half text width
    \pgfutil@tempdima=\pgfkeysvalueof{/pgf/inner sep}
    \advance\pgf@x by\pgfutil@tempdima          % add padding

    % If a larger minimum width was requested, honour that too
    \pgfutil@tempdimb=\pgfkeysvalueof{/pgf/minimum width}
    \ifdim\pgfutil@tempdimb>0pt
%    \showthe\pgf@x
%    \showthe\pgfutil@tempdimb
      \pgfutil@tempdimb=.5\pgfutil@tempdimb
      \ifdim\pgfutil@tempdimb>\pgf@x
        \pgf@x=\pgfutil@tempdimb
      \fi
    \fi
    % Now  \pgf@x  holds the radius R

    % --- path: left-base → arc → right-base --------------------------
    \pgfpathmoveto{\pgfqpoint{-\pgf@x}{0pt}}        % left end of baseline
    \pgfpatharc{180}{0}{\pgf@x}                     % semicircle to right
    \pgfpathclose                                   % straight line back
  }
}


\pgfdeclareshape{halfshield}{
  % inherit all rectangle anchors so north/south/east/west work
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}

  \backgroundpath{
    % radius  R  = half the computed textbox width
    \pgf@x=.5\wd\pgfnodeparttextbox   % R now in \pgf@x

    % draw a semicircle centred on the node’s centre:
    % put the baseline at y = -R/2 so the shape is vertically balanced
    \pgf@y=-.5\pgf@x                  % baseline offset

    \pgfpathmoveto{\pgfqpoint{-\pgf@x}{\pgf@y}}  % left end of baseline
    \pgfpatharc{180}{0}{\pgf@x}                  % upper arc to the right
    \pgfpathclose                               % straight back to start
  }
}


\pgfdeclareshape{shieldaaaaaa}{
  \inheritsavedanchors[from=rectangle]
  \inheritanchorborder[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south west}

  \backgroundpath{
    \pgf@x=.5\wd\pgfnodeparttextbox   % half width
    \pgf@y=.5\ht\pgfnodeparttextbox   % half height

    % line from south-west anchor to north anchor
    \pgfpathmoveto{\pgfqpoint{-\pgf@x}{-\pgf@y}}   % south-west
    \pgfpathlineto{\pgfqpoint{0pt}{\pgf@y}}        % north
  }
}


\pgfdeclareshape{shieldddd}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Draw first diagonal: northwest to southeast
    \pgfpathmoveto{\pgfpoint{\pgf@xa}{\pgf@yb}}
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@ya}}
    
    % Draw second diagonal: southwest to northeast
    \pgfpathmoveto{\pgfpoint{\pgf@xa}{\pgf@ya}}
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yb}}
  }
}


\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners and calculate points
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate the two-thirds points on west and east edges
    \pgf@xc=\pgf@xa % west x-coordinate
    \pgf@xd=\pgf@xb % east x-coordinate
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya % 2/3 up from bottom
    
    % Start at north anchor
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    
    % Concave curve from north to west 2/3 point
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.3\pgf@xa + 0.7\pgf@xb}{\pgf@yb}}% control point
      {\pgfpoint{\pgf@xc}{\pgf@yc}}% end point
    
    % Curve from west 2/3 point to south
    \pgfpathquadraticcurveto%
      {\pgfpoint{\pgf@xa}{0.3\pgf@ya + 0.7\pgf@yb}}% control point
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@ya}}% south anchor
    
    % Mirror: curve from south to east 2/3 point
    \pgfpathquadraticcurveto%
      {\pgfpoint{\pgf@xb}{0.3\pgf@ya + 0.7\pgf@yb}}% control point
      {\pgfpoint{\pgf@xd}{\pgf@yc}}% end point
    
    % Concave curve from east 2/3 point to north
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.7\pgf@xa + 0.3\pgf@xb}{\pgf@yb}}% control point
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}% north anchor
    
    \pgfpathclose
  }
}


\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Draw line from north anchor to southwest anchor
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    \pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@ya}}
  }
}


\pgfdeclareshape{kite}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya
    
    % Draw line from north anchor to 2/3 up west edge
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    \pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yc}}
  }
}


\pgfdeclareshape{kite}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya
    
    % Draw kite shape
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    \pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yc}}
    \pgfpathlineto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@ya}}
    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yc}}
    \pgfpathclose
  }
}
\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya
    
    % Draw shield shape with curves
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    % Top left curve - concave outward
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.3\pgf@xa + 0.7\pgf@xb}{1.1\pgf@yb - 0.1\pgf@ya}}% control point outside
      {\pgfpoint{\pgf@xa}{\pgf@yc}}% west 2/3 point
    % Bottom left curve - concave inward  
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.7\pgf@xa + 0.3\pgf@xb}{0.9\pgf@ya + 0.1\pgf@yb}}% control point inside
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@ya}}% south anchor
    % Bottom right curve - concave inward
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.3\pgf@xa + 0.7\pgf@xb}{0.9\pgf@ya + 0.1\pgf@yb}}% control point inside
      {\pgfpoint{\pgf@xb}{\pgf@yc}}% east 2/3 point
    % Top right curve - concave outward
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.7\pgf@xa + 0.3\pgf@xb}{1.1\pgf@yb - 0.1\pgf@ya}}% control point outside
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}% north anchor
    \pgfpathclose
  }
}


\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya
    
    % Calculate width for control point offsets
    \pgf@xc=\pgf@xb
    \advance\pgf@xc by -\pgf@xa % width of shape
    
    % Draw shield shape with curves
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    % Top left curve - concave outward (control point 1/6 width outward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb - 0.167\pgf@xc}{0.5\pgf@yb + 0.5\pgf@yc}}% midpoint moved left
      {\pgfpoint{\pgf@xa}{\pgf@yc}}% west 2/3 point
    % Bottom left curve - concave inward (control point 1/4 width inward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb - 0.25\pgf@xc}{0.5\pgf@ya + 0.5\pgf@yc}}% midpoint moved right
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@ya}}% south anchor
    % Bottom right curve - concave inward (control point 1/4 width inward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb + 0.25\pgf@xc}{0.5\pgf@ya + 0.5\pgf@yc}}% midpoint moved left
      {\pgfpoint{\pgf@xb}{\pgf@yc}}% east 2/3 point
    % Top right curve - concave outward (control point 1/6 width outward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb + 0.167\pgf@xc}{0.5\pgf@yb + 0.5\pgf@yc}}% midpoint moved right
      {\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}% north anchor
    \pgfpathclose
  }
}


\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya
    
    % Calculate width for control point offsets
    \pgf@xc=\pgf@xb
    \advance\pgf@xc by -\pgf@xa % width of shape
    
    % Draw kite shape with straight lines
%    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
%    \pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yc}}
%    \pgfpathlineto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@ya}}
%    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yc}}
%    \pgfpathclose
    
    % Add dots at control points for debugging
    % Top left control point
    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb - 0.167\pgf@xc}{0.5\pgf@yb + 0.5\pgf@yc}}{1pt}
    % Bottom left control point  
    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb - 0.25\pgf@xc}{0.5\pgf@ya + 0.5\pgf@yc}}{1pt}
    % Bottom right control point
    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb + 0.25\pgf@xc}{0.5\pgf@ya + 0.5\pgf@yc}}{1pt}
    % Top right control point
    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb + 0.167\pgf@xc}{0.5\pgf@yb + 0.5\pgf@yc}}{1pt}


  }
}

\newdimen\my@xa
\newdimen\my@ya
\newdimen\my@xb
\newdimen\my@yb
\newdimen\my@xc
\newdimen\my@yc


\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \my@xa=\pgf@x \my@ya=\pgf@y
    \northeast \my@xb=\pgf@x \my@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \my@yc=\my@ya
    \advance\my@yc by 0.667\my@yb
    \advance\my@yc by -0.667\my@ya
    
    % Calculate width for control point offsets
    \my@xc=\my@xb
    \advance\my@xc by -\my@xa % width of shape
    
%    % Draw kite shape with straight lines
%    \pgfpathmoveto{\pgfpoint{0.5\my@xa + 0.5\my@xb}{\my@yb}}
%    \pgfpathlineto{\pgfpoint{\my@xa}{\my@yc}}
%    \pgfpathlineto{\pgfpoint{0.5\my@xa + 0.5\my@xb}{\my@ya}}
%    \pgfpathlineto{\pgfpoint{\my@xb}{\my@yc}}
%    \pgfpathclose
    
    % Draw shield shape with curves
    \pgfpathmoveto{\pgfpoint{0.5\my@xa + 0.5\my@xb}{\my@yb}}
    % Top left curve - concave outward (control point 1/6 width outward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\my@xa + 0.5\my@xb - 0.167\my@xc}{0.5\my@yb + 0.5\my@yc}}% midpoint moved left
      {\pgfpoint{\my@xa}{\my@yc}}% west 2/3 point
    % Bottom left curve - concave inward (control point 1/4 width inward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\my@xa + 0.5\my@xb - 0.25\my@xc}{0.5\my@ya + 0.5\my@yc}}% midpoint moved right
      {\pgfpoint{0.5\my@xa + 0.5\my@xb}{\my@ya}}% south anchor
    % Bottom right curve - concave inward (control point 1/4 width inward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\my@xa + 0.5\my@xb + 0.25\my@xc}{0.5\my@ya + 0.5\my@yc}}% midpoint moved left
      {\pgfpoint{\my@xb}{\my@yc}}% east 2/3 point
    % Top right curve - concave outward (control point 1/6 width outward)
    \pgfpathquadraticcurveto%
      {\pgfpoint{0.5\my@xa + 0.5\my@xb + 0.167\my@xc}{0.5\my@yb + 0.5\my@yc}}% midpoint moved right
      {\pgfpoint{0.5\my@xa + 0.5\my@xb}{\my@yb}}% north anchor
    \pgfpathclose


    % Add dots at control points for debugging
    % Top left control point (outward)
    \pgfpathcircle{\pgfpoint{0.5\my@xa + 0.5\my@xb - 0.167\my@xc}{0.5\my@yb + 0.5\my@yc}}{1pt}
    % Bottom left control point (inward)
    \pgfpathcircle{\pgfpoint{0.5\my@xa + 0.5\my@xb + 0.25\my@xc}{0.5\my@ya + 0.5\my@yc}}{1pt}
    % Bottom right control point (inward)
    \pgfpathcircle{\pgfpoint{0.5\my@xa + 0.5\my@xb - 0.25\my@xc}{0.5\my@ya + 0.5\my@yc}}{1pt}
    % Top right control point (outward)
    \pgfpathcircle{\pgfpoint{0.5\my@xa + 0.5\my@xb + 0.167\my@xc}{0.5\my@yb + 0.5\my@yc}}{1pt}
  }
}


%\pgfdeclareshape{shield}{
%  % Inherit anchors from rectangle
%  \inheritsavedanchors[from=rectangle]
%  \inheritanchor[from=rectangle]{center}
%  \inheritanchor[from=rectangle]{north}
%  \inheritanchor[from=rectangle]{south}
%  \inheritanchor[from=rectangle]{east}
%  \inheritanchor[from=rectangle]{west}
%  \inheritanchor[from=rectangle]{north east}
%  \inheritanchor[from=rectangle]{north west}
%  \inheritanchor[from=rectangle]{south east}
%  \inheritanchor[from=rectangle]{south west}
%  
%  % Background path (defines the shape outline)
%  \backgroundpath{
%    % Get the corners
%    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
%    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
%    
%    % Calculate 2/3 up the west edge
%    \pgf@yc=\pgf@ya
%    \advance\pgf@yc by 0.667\pgf@yb
%    \advance\pgf@yc by -0.667\pgf@ya
%    
%    % Calculate width for control point offsets
%    \pgf@xc=\pgf@xb
%    \advance\pgf@xc by -\pgf@xa % width of shape
%    
%    % Draw kite shape with straight lines
%    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
%    \pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yc}}
%    \pgfpathlineto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@ya}}
%    \pgfpathlineto{\pgfpoint{\pgf@xb}{\pgf@yc}}
%    \pgfpathclose
%    
%    % Add dots at control points for debugging
%    % Top left control point (outward)
%    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb - 0.167\pgf@xc}{0.5\pgf@yb + 0.5\pgf@yc}}{1pt}
%    \pgfusepath{fill}
%    % Bottom left control point (inward)
%    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb + 0.25\pgf@xc}{0.5\pgf@ya + 0.5\pgf@yc}}{1pt}
%    \pgfusepath{fill}
%    % Bottom right control point (inward)
%    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb - 0.25\pgf@xc}{0.5\pgf@ya + 0.5\pgf@yc}}{1pt}
%    \pgfusepath{fill}
%    % Top right control point (outward)
%    \pgfpathcircle{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb + 0.167\pgf@xc}{0.5\pgf@yb + 0.5\pgf@yc}}{1pt}
%    \pgfusepath{fill}
%  }
%}
%
