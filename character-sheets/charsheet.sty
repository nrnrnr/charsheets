\RequirePackage[margin=7mm,top=4mm]{geometry}
\RequirePackage{tikz}
\RequirePackage{times}
\RequirePackage{xcolor}
\RequirePackage{colortbl}
\RequirePackage{environ}
\RequirePackage{tabularx}
\RequirePackage{booktabs}
\RequirePackage{calc}
\RequirePackage{suffix}
\RequirePackage{xstring}
\usetikzlibrary{calc}
\usetikzlibrary{positioning}
\usetikzlibrary{shapes}
\usepgflibrary{intersections}

% Define colors for different sections
\colorlet{stats}{blue!10!white}
\colorlet{proficiencies}{yellow!12!white}
\colorlet{attacks}{orange!25!white}
\colorlet{magic}{red!12!white}
\colorlet{mypurple}{red!40!blue}
\colorlet{features}{magenta!16!white}
\colorlet{playername}{green!90!yellow!8!white}
\colorlet{teal}{blue!40!green}
\colorlet{equipment}{playername}
\colorlet{hpetc}{gray!40!white}

\newif\ifcaster
\casterfalse

\tikzset{
  dndbox/.style={ },  % make decorations work
  dndleft/.style={
    dndbox,
    minimum width=67mm,
  },
  dndright/.style={
    dndbox,
    minimum width=128mm,
  },
  dndfull/.style={
    dndbox,
    minimum width=198mm,
  },
  dndhits/.style={
    dndbox,
    fill=white,
    minimum height=21mm,
  },
  dndmaxhp/.style={
    dndbox,
    fill=white,
    minimum height=18mm,
    minimum width=24mm,
  },
  statbox/.style={
    minimum width=18mm,
    minimum height=20mm,
    fill=none,
  },
}

\tikzset{
  magic/.style={
    dndright,
    fill=magic,
  },
  attacks/.style={
    dndright,
    fill=attacks,
  },
  features/.style={
    dndright,
    fill=features,
  },
  equipment/.style={
    dndleft,
    fill=equipment,
  },
}

\tikzset{
  proficiencies/.style={
    dndbox,
    minimum width=37mm,
    fill=proficiencies,
  },
}

% dndbox should create a node

%%  % inside a tikzpicture
%%  \node[minimum width=60mm,   % desired width
%%        minimum height=35mm,  % desired height
%%        inner sep=0pt,        % no extra padding
%%        outer sep=0pt]        % (optional) no extra margin
%%        (MyBox) at (10mm,5mm) {};

\newcommand\dndnode[4]{%
   % name, origin, w, h
  \node[
      anchor=south west,
      rectangle,
      minimum width=#3,   % desired width
      minimum height=#4,  % desired height
      inner sep=0pt,        % no extra padding
      outer sep=0pt]        % (optional) no extra margin
      (#1) at (#2) {};
}

\newcommand\dndnodebox[4]{%
  \dndnode{#1}{#2}{#3}{#4}
  \dndbox{#2}{#3}{#4}
}


% Decorative box macro for D&D character sheets
% Usage: \dndbox{origin}{width}{height}
% where origin may be `x,y` or a coordinate name
\newcommand{\dndbox}[3]{%
  % Parameters: #1 = x,y, #2 = width, #3 = height
  \path (#1) coordinate (dndboxll);
  \dndboxhere{#2}{#3}
}
\newcommand\dndfill[4]{%
  \fill[#4] (#1) +(1mm,1mm) rectangle +(#2-1mm,#3-1mm);
}
\def\south{south}
\newcommand\dndlabeledbox[6][south]{% anchor, add color and label
  \dndfill{#2}{#3}{#4}{#5}
  \dndbox{#2}{#3}{#4}
  \def\anchor{#1}
  \ifx\anchor\south
    \path (#2) ++(#3/2,0mm) node [inner sep=6pt,anchor=#1] {\textsf{#6}};
  \else
    \path (#2) node [inner sep=6pt,anchor=#1] {\textsf{#6}};
  \fi
}
  

\newcommand{\dndboxhere}[2]{%
  % draw a decorative box with the lower left corner at node dndboxll
  % and with a width and height given by parameters #1 and #2
  \pgfmathsetmacro{\cornersize}{0.15} % Size of corner decorations
  \pgfmathsetmacro{\inset}{0.05} % Inset for inner lines
  
  % Define coordinates
  \path (dndboxll)     coordinate (ll)
             +(#1, 0)  coordinate (lr)
             +(#1, #2) coordinate (ur)
             +(0, #2)  coordinate (ul);
  
  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize)
    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize)
    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize)
    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);
}

\newcommand{\dndboxnodey}[1]{%
  % Draw a decorative box around the bounding box of node #1
  \pgfmathsetmacro{\cornersize}{0.15} % Size of corner decorations
  \pgfmathsetmacro{\inset}{0.05} % Inset for inner lines
  
  % Get the bounding box of the node
  \path (#1.south west) coordinate (ll)
        (#1.south east) coordinate (lr)
        (#1.north east) coordinate (ur)
        (#1.north west) coordinate (ul);
  
  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize)
    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize)
    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize)
    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);
}

\newcommand{\dndboxold}[4]{%
  % Parameters: #1 = x, #2 = y, #3 = width, #4 = height
  \pgfmathsetmacro{\cornersize}{0.15} % Size of corner decorations
  \pgfmathsetmacro{\inset}{0.05} % Inset for inner lines
  
  % Define coordinates
  \coordinate (ll) at (#1, #2);
  \coordinate (lr) at (#1 + #3, #2);
  \coordinate (ul) at (#1, #2 + #4);
  \coordinate (ur) at (#1 + #3, #2 + #4);
  
  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize)
    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize)
    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize)
    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);
}

% dndsection environment - stores parameters for use inside tikzpicture

\newlength\dndtextwidth

\NewEnviron{dndsection}[6]{%
  \begingroup
  \newcommand{\dndsectionx}{#1}%
  \newcommand{\dndsectiony}{#2}%
  \newcommand{\dndsectionwidth}{#3}%
  \newcommand{\dndsectionheight}{#4}%
  \newcommand{\dndsectiontitle}{#5}%
  \newcommand{\dndsectioncolor}{#6}%
  % Fill background
  \fill[\dndsectioncolor] (\dndsectionx + 1mm, \dndsectiony + 1mm) rectangle (\dndsectionx + \dndsectionwidth - 1mm, \dndsectiony + \dndsectionheight - 1mm);
  
  % Draw the decorative box
  \dndbox{\dndsectionx,\dndsectiony}{\dndsectionwidth}{\dndsectionheight}
  
  % Place the title at the bottom center
  \node[font=\footnotesize\scshape, anchor=south] at (\dndsectionx + \dndsectionwidth/2, \dndsectiony + 1mm) {\sffamily {\dndsectiontitle}};
  
  % Calculate minipage width
 \setlength{\dndtextwidth}{\dndsectionwidth}
 \addtolength\dndtextwidth{-2\fboxsep}
 \addtolength\dndtextwidth{-2mm}

  % Place content in a minipage
  \node[anchor=north west, inner sep=0] at (\dndsectionx + \fboxsep + 1mm, \dndsectiony+\dndsectionheight - \fboxsep - 1mm) {%
   \begin{minipage}{\dndtextwidth}%
     \BODY%
   \end{minipage}%
  };
  \endgroup
}

\newlength\leftwidth
\newlength\dndrightwidth
\leftwidth=6.5cm
\dndrightwidth=128mm
\newlength\rightx
\rightx=7.15cm

\let\rightwidth=\dndrightwidth


% Specific section environments with fixed positions
% Use different body names to avoid conflicts
\environbodyname\attacksbody
\NewEnviron{attackssection}{%
  \ifcaster
    \def\y{152mm}%
    \def\h{26mm}
  \else
    \def\y{129mm}%
    \def\h{49mm}
  \fi  
  \begin{dndsection}{\rightx}{\y}{\rightwidth}{\h}{ATTACKS}{attacks}
    \attacksbody
  \end{dndsection}
}[\ignorespacesafterend]
% y = 128mm for noncasters


\environbodyname\featuresbody

%%\NewEnviron{featuressection}{%  noncaster
%%  \begin{dndsection}{\rightx}{55mm}{\rightwidth}{70mm}{FEATURES}{features}
%%    \featuresbody
%%  \end{dndsection}
%%}[\ignorespacesafterend]
%%

\NewEnviron{featuressection}{%  caster
  \begin{dndsection}{\rightx}{0mm}{\rightwidth}{42mm}{FEATURES}{features}
    \featuresbody
  \end{dndsection}
}[\ignorespacesafterend]


\environbodyname\magicbody  
\NewEnviron{magicsection}{%
  \dndnode{magic}{\rightx,44.5mm}{\rightwidth}{105mm};
  \begin{dndsection}{\rightx}{44.5mm}{\rightwidth}{105mm}{MAGIC}{magic}
    \magicbody
  \end{dndsection}
}[\ignorespacesafterend]

\environbodyname\equipmentbody
\NewEnviron{equipmentsection}{%
  \dndnode{equipment}{0mm,0mm}{68mm}{53mm}
  \begin{dndsection}{0mm}{0mm}{68mm}{53mm}{EQUIPMENT}{equipment}
    \equipmentbody
  \end{dndsection}
}[\ignorespacesafterend]

\environbodyname\proficienciesbody
\NewEnviron{proficienciessection}{%
  \begin{dndsection}{30mm}{55mm}{38mm}{160mm}{PROFICIENCIES}{proficiencies}
    \proficienciesbody
  \end{dndsection}
}[\ignorespacesafterend]



\newenvironment{nobullets}
  {\begin{list}{}{%
      \setlength{\leftmargin}{0pt}% no indentation
      \setlength{\labelwidth}{0pt}%
      \setlength{\labelsep}{0pt}%
      \setlength{\itemindent}{0pt}%
      \setlength{\topsep}{0pt}% space before/after the list
      \setlength{\partopsep}{0pt}%
      \setlength{\parsep}{0pt}%
      \setlength{\itemsep}{0.5\smallskipamount}% space between items
      \renewcommand*{\makelabel}[1]{}% suppress the bullet
  }}%
  {\end{list}}

\newenvironment{proflist}
  {\begin{list}{}{%
      \raggedright
      \setlength{\leftmargin}{16pt}% no indentation
      \setlength{\labelwidth}{0pt}%
      \setlength{\labelsep}{0pt}%
      \setlength{\itemindent}{-10pt}%
      \setlength{\topsep}{0pt}% space before/after the list
      \setlength{\partopsep}{0pt}%
      \setlength{\parsep}{0pt}%
      \setlength{\itemsep}{2pt}% space between items
      \renewcommand*{\makelabel}[1]{}% suppress the bullet
  }}%
  {\end{list}}

\newenvironment{eqlist}
  {\begin{list}{}{%
      \raggedright
      \setlength{\leftmargin}{24mm}% no indentation
      \setlength{\labelwidth}{0pt}%
      \setlength{\labelsep}{0pt}%
      \setlength{\itemindent}{-4mm}%
      \setlength{\topsep}{0pt}% space before/after the list
      \setlength{\partopsep}{0pt}%
      \setlength{\parsep}{0pt}%
      \setlength{\itemsep}{2pt}% space between items
      \renewcommand*{\makelabel}[1]{}% suppress the bullet
  }}%
  {\end{list}}


\newcommand\feature[2]{%
  \colorbox[gray]{0.9}{\parbox[t]{\hsize}{\raggedright\itshape#1}}&
  \colorbox[gray]{0.9}{\parbox[t]{\hsize}{\raggedright\upshape#2}}\\
}

\newenvironment{featurestab}
  {\renewcommand\arraystretch{1.5}%
   \begin{tabular}{>{\raggedright\arraybackslash\itshape}p{26mm}>{\raggedright\arraybackslash}p{93mm}}}
  {\end{tabular}}


\newenvironment{spellstab}
  {\renewcommand\arraystretch{1.5}%
   \begin{tabular}{>{\raggedright\arraybackslash\itshape}p{26mm}>{\raggedright\arraybackslash}p{93mm}}}
  {\end{tabular}}

\newcommand\cantripsheader{%
  \multicolumn2{l}{\textsf{CANTRIPS}}%
}

\newcommand{\checkboxes}[1]{%
  \begingroup
  \count0=#1\relax
  \loop
    \ifnum\count0>0
      $\circ$\,
      \ifnum\count0>1~\fi
      \advance\count0 by -1
  \repeat
  \endgroup
}

\newcommand\hpetcll{\rightx + 30mm, 184mm}

\newcommand\hpbackground{
  \fill[hpetc] (\hpetcll) coordinate (hpbackground) rectangle +(98mm,44.5mm);
}

%\newcommand\hpbackground{
%  \node (hpbackground) 
%   at (splash.south east)
%   [fill=hpetc,anchor=north east,minimum width=98mm, minimum height=44.5mm] 
%   { };
%}

\newcommand\spellsheader[2]{%
  \multicolumn2{l}{\textsf{LEVEL~#1 \checkboxes{#2}/day}}%
}


\newenvironment{attackstab}
  {\renewcommand\arraystretch{1.3}%
   \tabcolsep=0.5\tabcolsep
   \small
   \begin{tabular}{@{}cccccc@{}}
   \multicolumn1{@{}l}{\textsf{NAME}}&
   \textsf{ATTACK}&
   \textsf{DAMAGE}&
   \textsf{TYPE}&
   \textsf{RANGE}&
   \textsf{AMMO}\\
   \midrule
  }
  {\end{tabular}}


%-------------------------------------------------------------
%  Shield shape: top made of two quadratic curves, tapered
%  sides meeting at a point.  Works with minimum width/height,
%  inner sep, anchors, etc.
%-------------------------------------------------------------

\pgfdeclareshape{kite}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path (defines the shape outline)
  \backgroundpath{
    % Get the corners
    \southwest \pgf@xa=\pgf@x \pgf@ya=\pgf@y
    \northeast \pgf@xb=\pgf@x \pgf@yb=\pgf@y
    
    % Calculate 2/3 up the west edge
    \pgf@yc=\pgf@ya
    \advance\pgf@yc by 0.667\pgf@yb
    \advance\pgf@yc by -0.667\pgf@ya
    
    % Draw line from north anchor to 2/3 up west edge
    \pgfpathmoveto{\pgfpoint{0.5\pgf@xa + 0.5\pgf@xb}{\pgf@yb}}
    \pgfpathlineto{\pgfpoint{\pgf@xa}{\pgf@yc}}
  }
}

\newdimen\my@xa
\newdimen\my@ya
\newdimen\my@xb
\newdimen\my@yb
\newdimen\my@xc
\newdimen\my@yc


\def\shieldTopScale{0.15}
\def\shieldBottomScale{0.3}

% Here is a {\LaTeX} macro that is meant to draw a shield shape.  I
% started with a kite shape using straight lines to connect
% north-west-south-east, then replaced the first straight line with a
% quadratic curve.  Emulating the code that is there, will you please
% replace the other three straight lines with similar curves?

\pgfdeclareshape{shield}{
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}

  \anchor{ac}{
    \southwest \my@W=\pgf@x \my@S=\pgf@y
    \northeast \my@E=\pgf@x \my@N=\pgf@y
    \pgfpoint{0.5\my@W+0.5\my@E}{0.4\my@S+0.6\my@N}}     

  % Background path (defines the shape outline)
  \backgroundpath{


    % Get the corners
    \southwest \my@W=\pgf@x \my@S=\pgf@y
    \northeast \my@E=\pgf@x \my@N=\pgf@y
    % p + t(q - p) == (1-t)*p + t * q
    \pgfmathsetlength\my@Cx{0.5\my@W+0.5\my@E}
    \pgfmathsetlength\my@Cy{0.2\my@S+0.80\my@N}
    \def\north{\pgfpoint{\my@Cx}{\my@N}}
    \def\west {\pgfpoint{\my@W}{\my@Cy}}
    \def\south{\pgfpoint{\my@Cx}{\my@S}}
    \def\east {\pgfpoint{\my@E}{\my@Cy}}

    % Draw kite shape with curved lines
    \pgfpathmoveto{\north}
    
    % Curve from north to west
    \pgfpointlineattime{0.5}{\west}{\north} % bisector
    \pgfgetlastxy{\my@xa}{\my@ya}
    \pgfpointdiff{\west}{\north}
    \pgfgetlastxy{\my@xb}{\my@yb} % note swap
    \pgfpathquadraticcurveto
        {\pgfpointadd{\pgfpoint{\my@xa}{\my@ya}}
                     {\pgfpointscale{\shieldTopScale}{\pgfpoint{\my@yb}{-\my@xb}}}}
        {\west}
    
    % Curve from west to south
    \pgfpointlineattime{0.5}{\south}{\west} % bisector
    \pgfgetlastxy{\my@xa}{\my@ya}
    \pgfpointdiff{\south}{\west}
    \pgfgetlastxy{\my@xb}{\my@yb} % note swap
    \pgfpathquadraticcurveto
        {\pgfpointadd{\pgfpoint{\my@xa}{\my@ya}}
                     {\pgfpointscale{\shieldBottomScale}{\pgfpoint{-\my@yb}{\my@xb}}}}
        {\south}
    
    % Curve from south to east
    \pgfpointlineattime{0.5}{\east}{\south} % bisector
    \pgfgetlastxy{\my@xa}{\my@ya}
    \pgfpointdiff{\east}{\south}
    \pgfgetlastxy{\my@xb}{\my@yb} % note swap
    \pgfpathquadraticcurveto
        {\pgfpointadd{\pgfpoint{\my@xa}{\my@ya}}
                     {\pgfpointscale{\shieldBottomScale}{\pgfpoint{-\my@yb}{\my@xb}}}}
        {\east}
    
    % Curve from east to north (closing the path)
    \pgfpointlineattime{0.5}{\north}{\east} % bisector
    \pgfgetlastxy{\my@xa}{\my@ya}
    \pgfpointdiff{\north}{\east}
    \pgfgetlastxy{\my@xb}{\my@yb} % note swap
    \pgfpathquadraticcurveto
        {\pgfpointadd{\pgfpoint{\my@xa}{\my@ya}}
                     {\pgfpointscale{\shieldTopScale}{\pgfpoint{\my@yb}{-\my@xb}}}}
        {\north}
  }
}



\newcommand{\dndboxnode}[1]{%
  % Draw a decorative box around the node #1 using inner separation boundaries
  \pgfmathsetmacro{\cornersize}{0.15} % Size of corner decorations
  \pgfmathsetmacro{\inset}{0.05} % Inset for inner lines
  
  % Get the node's shape and extract inner dimensions
  \begingroup
    \pgfpointanchor{#1}{center}
    \pgf@xa=\pgf@x
    \pgf@ya=\pgf@y
    
    % Get the text box dimensions (excluding inner sep)
    \pgfpointanchor{#1}{text}
    \advance\pgf@x by -\pgf@xa
    \advance\pgf@y by -\pgf@ya
    \pgfmathsetmacro{\textwidth}{2*abs(\pgf@x)*0.03514598}
    \pgfmathsetmacro{\textheight}{2*abs(\pgf@y)*0.03514598}
    
    % Use a more direct approach with the node's actual boundaries
    % Calculate positions based on the node's text area
    \pgfextractx{\pgf@xa}{\pgfpointanchor{#1}{west}}
    \pgfextractx{\pgf@xb}{\pgfpointanchor{#1}{east}}
    \pgfextracty{\pgf@ya}{\pgfpointanchor{#1}{south}}
    \pgfextracty{\pgf@yb}{\pgfpointanchor{#1}{north}}
    
    % Get inner sep values from the node
    \pgfkeysgetvalue{/pgf/inner xsep}{\innerxsep}
    \pgfkeysgetvalue{/pgf/inner ysep}{\innerysep}
    \ifx\innerxsep\pgfkeysnovalue
      \def\innerxsep{.3333em}
    \fi
    \ifx\innerysep\pgfkeysnovalue  
      \def\innerysep{.3333em}
    \fi
    
    % Convert inner sep to points
    \pgfmathsetlengthmacro{\innerxseppt}{\innerxsep}
    \pgfmathsetlengthmacro{\inneryseppt}{\innerysep}
    
    % Define coordinates at inner separation boundaries
    % We need to account for the cornersize to ensure decorations stay within bounds
    \pgfmathsetlengthmacro{\totalinsetx}{\innerxseppt + \cornersize cm}
    \pgfmathsetlengthmacro{\totalinsety}{\inneryseppt + \cornersize cm}
    
    \coordinate (ll) at ($(#1.south west) + (\totalinsetx, \totalinsety)$);
    \coordinate (lr) at ($(#1.south east) + (-\totalinsetx, \totalinsety)$);
    \coordinate (ur) at ($(#1.north east) + (-\totalinsetx, -\totalinsety)$);
    \coordinate (ul) at ($(#1.north west) + (\totalinsetx, -\totalinsety)$);
  \endgroup
  
  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize)
    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize)
    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize)
    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);
}


\newcommand\dndinset{0.1}

\newcommand{\dnddecorate}[2][white]{%
  % draw a decorative box on the named node
  \pgfmathsetmacro{\cornersize}{0.30} % Size of corner decorations
  \pgfmathsetmacro{\inset}{\dndinset} % Inset for inner lines

  % 0.75pt is half of line width

  % Define coordinates
  \path (#2.south west) +(0.75pt,0.75pt) coordinate (ll)
        (#2.south east) +(-0.75pt,0.75pt) coordinate (lr)
        (#2.north west) +(0.75pt,-0.75pt) coordinate (ul)
         (#2.north east) +(-0.75pt,-0.75pt) coordinate (ur)
     ;
  
%   \draw[ultra thin] (ll) -- (lr) -- (ur) -- (ul) -- cycle;

%  \draw [blue]
%        (#2.south west) --
%        (#2.south east) --
%        (#2.north east) --
%        (#2.north west) --
%        cycle
%     ;




    \fill[#1] (ll) -- +(\cornersize,0) arc (0:90:\cornersize) -- cycle;
    \fill[#1] (lr) -- +(-\cornersize,0) arc (180:90:\cornersize) -- cycle;
    \fill[#1] (ul) -- +(\cornersize,0) arc (0:-90:\cornersize) -- cycle;
    \fill[#1] (ur) -- +(-\cornersize,0) arc (180:270:\cornersize) -- cycle;



  % Main outer frame (heavy lines)
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) -- ($(lr) + (-\cornersize, 0)$)
    ($(lr) + (0, \cornersize)$) -- ($(ur) + (0, -\cornersize)$)
    ($(ur) + (-\cornersize, 0)$) -- ($(ul) + (\cornersize, 0)$)
    ($(ul) + (0, -\cornersize)$) -- ($(ll) + (0, \cornersize)$);
  
  % Corner decorations (ornate corners)
  % Lower-left corner
  \draw[line width=1.5pt] 
    ($(ll) + (\cornersize, 0)$) arc (0:90:\cornersize)
%%    ($(ll) + (0, \cornersize)$) -- ($(ll) + (0, \cornersize/2)$)
%%    ($(ll) + (\cornersize, 0)$) -- ($(ll) + (\cornersize/2, 0)$)
     ;
  \draw[line width=0.8pt] 
    ($(ll) + (\cornersize*0.7, \cornersize*0.3)$) arc (0:90:\cornersize*0.3);
    
  % Lower-right corner
  \draw[line width=1.5pt] 
    ($(lr) + (-\cornersize, 0)$) arc (180:90:\cornersize);
%    ($(lr) + (0, \cornersize)$) -- ($(lr) + (0, \cornersize/2)$)
%    ($(lr) + (-\cornersize, 0)$) -- ($(lr) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(lr) + (-\cornersize*0.7, \cornersize*0.3)$) arc (180:90:\cornersize*0.3);
    
  % Upper-right corner
  \draw[line width=1.5pt] 
    ($(ur) + (-\cornersize, 0)$) arc (180:270:\cornersize);
%    ($(ur) + (0, -\cornersize)$) -- ($(ur) + (0, -\cornersize/2)$)
%    ($(ur) + (-\cornersize, 0)$) -- ($(ur) + (-\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ur) + (-\cornersize*0.7, -\cornersize*0.3)$) arc (180:270:\cornersize*0.3);
    
  % Upper-left corner
  \draw[line width=1.5pt] 
    ($(ul) + (\cornersize, 0)$) arc (0:-90:\cornersize);
%    ($(ul) + (0, -\cornersize)$) -- ($(ul) + (0, -\cornersize/2)$)
%    ($(ul) + (\cornersize, 0)$) -- ($(ul) + (\cornersize/2, 0)$);
  \draw[line width=0.8pt] 
    ($(ul) + (\cornersize*0.7, -\cornersize*0.3)$) arc (0:-90:\cornersize*0.3);
  
  % Inner frame lines (lighter)
  \draw[line width=0.5pt]
    ($(ll) + (\inset, \inset)$) rectangle ($(ur) + (-\inset, -\inset)$);
  
  % Double line effect on sides
  \draw[line width=0.3pt]
    ($(ll) + (\inset*2, \cornersize*1.5)$) -- ($(ul) + (\inset*2, -\cornersize*1.5)$)
    ($(lr) + (-\inset*2, \cornersize*1.5)$) -- ($(ur) + (-\inset*2, -\cornersize*1.5)$);

%  \foreach \a in {north west, north east, south west, south east} {
%    \fill[blue] (#2.\a) circle[radius=1pt];
%  }


%  \path (0,0) % expect semicolon after macro



}


\newcommand{\spellslotso}[1]{%
  \hbox{%
    \begin{tikzpicture}[baseline=(current bounding box.center)]
      \ifnum#1>0
        % Draw the first circle
        \draw (0,0) circle (1.6mm);
        
        % Draw remaining circles with double lines between them
        \foreach \i in {2,...,#1} {
          \pgfmathsetmacro{\xpos}{(\i-1)*6.2}
          \pgfmathsetmacro{\prevxpos}{(\i-2)*6.2}
          
          % Draw double line from previous circle to current position
          \draw[double, double distance=0.4mm] 
            (\prevxpos mm + 1.6mm, 0) -- (\xpos mm - 1.6mm, 0);
          
          % Draw current circle
          \draw (\xpos mm,0) circle (1.6mm);
        }
      \fi
    \end{tikzpicture}%
  }%
}




\newcommand{\spellslots}[1]{%
  \hbox{%
    \begin{tikzpicture}[baseline=1pt, thick]
      \ifnum#1>0
        % Draw the first circle
        \draw (0,1.6mm) circle (1.6mm);
        
        % Draw remaining circles with double lines between them
        \foreach \i in {2,...,#1} {
          \pgfmathsetmacro{\xpos}{(\i-1)*5.0}
          \pgfmathsetmacro{\prevxpos}{(\i-2)*5.0}
          
          % Draw double line from previous circle to current position
          \draw[double, double distance=0.6mm] 
            (\prevxpos mm + 1.6mm, 1.6mm) -- (\xpos mm - 1.6mm, 1.6mm);
          
          % Draw current circle
          \draw (\xpos mm,1.6mm) circle (1.6mm);
        }
      \fi
    \end{tikzpicture}%
  }%
}





% Helper to parse optional distance
\def\tikz@corner@parse#1of #2\tikz@stop{%
    \def\tikz@corner@node{#2}%
    \ifx\\#1\\%
        % No distance specified, use default
        \let\tikz@corner@distance\tikz@node@distance%
    \else
        % Distance specified
        \def\tikz@corner@distance{#1}%
    \fi
}


\tikzset{
    % Inside south east corner
    inside south east corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=south east,
            at={($(\tikz@corner@node.south east)+(-\tikz@corner@distance,\tikz@corner@distance)$)}%
        }%
    },
    % Inside south west corner
    inside south west corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=south west,
            at={($(\tikz@corner@node.south west)+(\tikz@corner@distance,\tikz@corner@distance)$)}%
        }%
    },
    % Inside north east corner
    inside north east corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north east,
            at={($(\tikz@corner@node.north east)+(-\tikz@corner@distance,-\tikz@corner@distance)$)}%
        }%
    },
    % Inside north west corner
    inside north west corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north west,
            at={($(\tikz@corner@node.north west)+(\tikz@corner@distance,-\tikz@corner@distance)$)}%
        }%
    },
    % Below right corner with optional distance
    below right corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north east,
            at={($(\tikz@corner@node.south east)+(0,-\tikz@corner@distance)$)},%
        }%
    },
    % Above left corner with optional distance
    above left corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=south west,
            at={($(\tikz@corner@node.north west)+(0,\tikz@corner@distance)$)}%
        }%
    },
    % Below left corner with optional distance
    below left corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north west,
            at={($(\tikz@corner@node.south west)+(0,-\tikz@corner@distance)$)}%
        }%
    },
    % Above right corner with optional distance
    above right corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=south east,
            at={($(\tikz@corner@node.north east)+(0,\tikz@corner@distance)$)}%
        }%
    },
    % Right of upper corner with optional distance
    right of upper corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north west,
            at={($(\tikz@corner@node.north east)+(\tikz@corner@distance,0)$)}%
        }%
    },
    % Right of lower corner with optional distance
    right of lower corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north west,
            at={($(\tikz@corner@node.south east)+(\tikz@corner@distance,0)$)}%
        }%
    },
    % Left of upper corner with optional distance
    left of upper corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=south east,
            at={($(\tikz@corner@node.north west)+(-\tikz@corner@distance,0)$)}%
        }%
    },
    % Left of lower corner with optional distance
    left of lower corner/.code={%
        \tikz@corner@parse#1\tikz@stop%
        \tikzset{%
            anchor=north east,
            at={($(\tikz@corner@node.south west)+(-\tikz@corner@distance,0)$)}%
        }%
    }
}

\tikzset{
    height/.style={minimum height=#1},
    width/.style={minimum width=#1}
}

% --- run-later list ----------------------------------------



%\newtoks\DND@finalizer   % stores things like \do{A}\do{B}
%
%% reset list at the start of every picture
%\tikzset{
%  % node option [decorate]: append \do{<lastnode>} to the toks list
%  dnd/decorate/.style={
%    append after command={
%      \pgfextra{%
%        \begingroup
%          % expand \tikzlastnode but keep \do untouched
%          \edef\temp{\the\DND@finalizer \noexpand\dnddecorate{\tikzlastnode}}%
%          \global\DND@finalizer=\expandafter{\temp}%
%        \endgroup
%      }%
%    }
%  },
%  decorate/.style={dnd/decorate}, % short alias
%}

\newenvironment{charsheet}[1][]
  {\begin{tikzpicture}[x=1cm,y=1cm, node distance=5pt,outer sep=0pt,
    execute at begin picture={\global\DND@decorations={}},
   execute at end picture={%
    \begingroup
      \edef\temp{\the\DND@decorations}%
       \temp
    \endgroup
  },
  label/.style={dnd/label}, % short alias
    #1]
   \useasboundingbox (0,0) rectangle (\textwidth,\textheight);
   \path (current bounding box.north) coordinate (top)
         (current bounding box.south east) coordinate (bottom right)
         (current bounding box.south west) coordinate (bottom left)
         (current bounding box.north east) coordinate (top right)
         (current bounding box.north west) coordinate (top left)
   ;
  }
  {\end{tikzpicture}}



\newtoks\DND@decorations   % stores things like \do{A}\do{B}


\tikzset{
  % node option [decorate]: append \do{<lastnode>} to the toks list
  dnd/decorate/.style={
    append after command={
      \pgfextra{%
        \begingroup
          % expand \tikzlastnode but keep \dnddecorate untouched
          \edef\temp{\the\DND@decorations \noexpand\dnddecorate[#1]{\tikzlastnode}}%
          \global\DND@decorations=\expandafter{\temp}%
        \endgroup
      }%
    }
  },
  dnd/decorate/.default=white,
  decorate/.style={dnd/decorate={#1}}, % short alias
  decorate/.default=white,
%
  dnd/label/.style={
    append after command={
      \pgfextra{%
        \begingroup
          % expand \tikzlastnode but keep \dndlabel untouched
          \edef\temp{\the\DND@decorations \noexpand\dndlabel{\tikzlastnode}{#1}}%
          \global\DND@decorations=\expandafter{\temp}%
        \endgroup
      }%
    }
  },
%  label/.style={dnd/label={#1}}, % short alias
  dndlabel/.style={dnd/label={#1}}, % short alias
%
}

\tikzset{
  innershield/.style={
    append after command={
      \pgfextra{%
        \begingroup
          % expand \tikzlastnode but keep \dnddecorate untouched
          \edef\temp{\the\DND@decorations \noexpand\innershield{\tikzlastnode}}%
          \global\DND@decorations=\expandafter{\temp}%
        \endgroup
      }%
    }
  },
}

\newcommand\innershield[1]{% node
  \node [shield,draw,thin,scale=0.88,fill=none] at (#1) { };
}



\renewcommand\innershield[1]{% node
  % Get the dimensions of the target node
  \pgfpointdiff{\pgfpointanchor{#1}{south west}}{\pgfpointanchor{#1}{north east}}
  \pgfgetlastxy{\nodewidth}{\nodeheight}
  
  % Create the inner shield with matching dimensions
  \node [shield,draw,thin,scale=0.88,fill=none,
         minimum width=\nodewidth,
         minimum height=\nodeheight] at (#1) { };
}


\pgfkeys{
  /tikz/longhexagon angle/.initial=30,
  /tikz/longhexagon angle/.default=30
}

% Declare meaningful coordinate registers
\newdimen\my@N  % North (top) y coordinate
\newdimen\my@E  % East (right) x coordinate
\newdimen\my@W  % West (left) x coordinate
\newdimen\my@S  % South (bottom) y coordinate
\newdimen\my@Cx % Center x coordinate
\newdimen\my@Cy % Center y coordinate

% Other useful registers
\newdimen\my@halfwidth
\newdimen\my@halfheight
\newdimen\my@offset

\def\setmy@NS{%
  \southwest
  \my@S=\pgf@y%
  \northeast
  \my@N=\pgf@y%
}



\newcommand\setlonghexoffset[1]{%
    % Get angle and calculate offset
    \pgfmathsetmacro{\hexangle}{\pgfkeysvalueof{/tikz/longhexagon angle}}%
    \pgfmathsetlength{#1}{(0.5\my@N-0.5\my@S)*tan(\hexangle)}%
}


% Macro to set NESW coordinates from southwest/northeast
\def\setmy@NEWSC{%
  \southwest
  \my@W=\pgf@x%
  \my@S=\pgf@y%
  \northeast
  \my@E=\pgf@x%
  \my@N=\pgf@y%
  % Calculate center
  \my@Cx=.5\my@W%
  \advance\my@Cx by.5\my@E%
  \my@Cy=.5\my@S%
  \advance\my@Cy by.5\my@N%
}

\def\setmy@halves{%
  % Calculate half dimensions
  \my@halfwidth=\my@E%
  \advance\my@halfwidth by-\my@W%
  \my@halfwidth=.5\my@halfwidth%
  \my@halfheight=\my@N%
  \advance\my@halfheight by-\my@S%
  \my@halfheight=.5\my@halfheight%
}

\pgfdeclareshape{longhexagon}{%
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
 % Saved anchor for inner north west
  \anchor{inner north west}{%
    \setmy@NEWSC
    \setlonghexoffset{\my@offset}%
    \pgfpoint{\my@W+\my@offset}{\my@N}% inner NW
  }
  \anchor{inner north east}{%
    \setmy@NEWSC
    \setlonghexoffset{\my@offset}%
    \pgfpoint{\my@E-\my@offset}{\my@N}% inner NW
  }
  
  \anchor{inner south west}{%
    \setmy@NEWSC
    \setlonghexoffset{\my@offset}%
    \pgfpoint{\my@W+\my@offset}{\my@S}% inner NW
  }
  \anchor{inner south east}{%
    \setmy@NEWSC
    \setlonghexoffset{\my@offset}%
    \pgfpoint{\my@E-\my@offset}{\my@S}% inner NW
  }
  
%  \anchor{inner north east}{\pgfprocess{\pgfpointanchor{\tikz@fig@name}{inner north west}}\pgf@x=-\pgf@x}
%  \anchor{inner south west}{\pgfprocess{\pgfpointanchor{\tikz@fig@name}{inner north west}}\pgf@y=-\pgf@y}
%  \anchor{inner south east}{\pgfprocess{\pgfpointanchor{\tikz@fig@name}{inner north west}}\pgf@x=-\pgf@x\pgf@y=-\pgf@y}
  


  % Background path
  \backgroundpath{%
    % Get NESW coordinates
    \setmy@NEWSC
    % Get angle and calculate offset
    \pgfmathsetmacro{\hexangle}{\pgfkeysvalueof{/tikz/longhexagon angle}}%
    \pgfmathsetlength\my@offset{(0.5\my@N-0.5\my@S)*tan(\hexangle)}%
    % Draw hexagon using meaningful coordinates
    \pgfpathmoveto{\pgfpoint{\my@W}{\my@Cy}}% west vertex
    \pgfpathlineto{\pgfpoint{\my@W+\my@offset}{\my@N}}% inner NW
    \pgfpathlineto{\pgfpoint{\my@E-\my@offset}{\my@N}}% inner NE
    \pgfpathlineto{\pgfpoint{\my@E}{\my@Cy}}% east vertex
    \pgfpathlineto{\pgfpoint{\my@E-\my@offset}{\my@S}}% inner SE
    \pgfpathlineto{\pgfpoint{\my@W+\my@offset}{\my@S}}% inner SW
    \pgfpathclose%
  }
}



%-----------------------------------------------------------------
% 1. \newDND{<name>}   – declare a key (no value yet)
%-----------------------------------------------------------------
\newcommand{\newDND}[1]{%
  \@ifundefined{dnd@decl@#1}{%
    \expandafter\def\csname dnd@decl@#1\endcsname{}%  mark as declared
  }{%
    \PackageError{dnd}{DND key `#1' already declared}{}%
  }%
}

%-----------------------------------------------------------------
% 2. \setDND{<name>}{<value>}   – assign a value (must be declared)
%-----------------------------------------------------------------
\newcommand{\setDND}[2]{%
  \@ifundefined{dnd@decl@#1}{%
    \PackageError{dnd}{DND key `#1' has not been declared}%
                   {Declare it first with \string\newDND.}%
  }{%
    \expandafter\def\csname dnd@val@#1\endcsname{#2}%
  }%
}

%-----------------------------------------------------------------
% 3. \valueDND{<name>}   – retrieve value (must be set)
%-----------------------------------------------------------------
\newcommand{\valueDND}[1]{%
  \@ifundefined{dnd@decl@#1}{%
    \PackageError{dnd}{DND key `#1' has not been declared}{}%
  }{%
    \@ifundefined{dnd@val@#1}{%
      \PackageError{dnd}{DND key `#1' has no value yet}%
                     {Assign one with \string\setDND.}%
    }{%
      \csname dnd@val@#1\endcsname
    }%
  }%
}

%-----------------------------------------------------------------
% 4. \ifDNDdefined{<name>}{<true>}{<false>}
%    Succeeds *only* after a value has been set.
%-----------------------------------------------------------------
\newcommand{\ifDNDdefined}[3]{%
  \@ifundefined{dnd@val@#1}{#3}{#2}%
}

%%  I'd like you to use \pgfdeclareshape to define a shape for me.  I want
%%  something called "stub rectangle".  It is a rectangle except each
%%  corner is replaced with a corner circle, as if a circular bite had
%%  been taken out of each corner.  Get the radius from a tikz key `stub
%%  radius`, and let it default to 5pt.

\pgfkeys{
  /tikz/stub radius/.initial=5pt,
  /tikz/stub radius/.default=5pt
}

\newdimen\my@stubradius

\pgfdeclareshape{stub rectangle}{%
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path
  \backgroundpath{%
    % Get NESW coordinates
    \setmy@NEWSC
    \setmy@halves
    % Get stub radius
    \pgfmathsetlength\my@stubradius{\pgfkeysvalueof{/tikz/stub radius}}%
    % Check if stub radius is too large
    \ifdim\my@stubradius>\my@halfwidth
      \pgferror{stub radius (\the\my@stubradius) is larger than half the width (\the\my@halfwidth)}%
    \fi
    \ifdim\my@stubradius>\my@halfheight
      \pgferror{stub radius (\the\my@stubradius) is larger than half the height (\the\my@halfheight)}%
    \fi
    % Draw the path with cut corners
    % Start at bottom edge, after SW corner bite
    \pgfpathmoveto{\pgfpoint{\my@W+\my@stubradius}{\my@S}}%
    % Line to SE corner bite start
    \pgfpathlineto{\pgfpoint{\my@E-\my@stubradius}{\my@S}}%
    % SE corner arc: we're west of corner, need to go north
    % Arc goes counterclockwise from current position
    \pgfpatharc{180}{90}{\my@stubradius}%
    % Now at radius north of SE corner
    % Line to NE corner bite start
    \pgfpathlineto{\pgfpoint{\my@E}{\my@N-\my@stubradius}}%
    % NE corner arc: we're south of corner, need to go west
    \pgfpatharc{270}{180}{\my@stubradius}%
    % Now at radius west of NE corner
    % Line to NW corner bite start
    \pgfpathlineto{\pgfpoint{\my@W+\my@stubradius}{\my@N}}%
    % NW corner arc: we're east of corner, need to go south
    \pgfpatharc{0}{-90}{\my@stubradius}%
    % Now at radius south of NW corner
    % Line to SW corner bite start
    \pgfpathlineto{\pgfpoint{\my@W}{\my@S+\my@stubradius}}%
    % SW corner arc: we're north of corner, need to go east
    \pgfpatharc{90}{0}{\my@stubradius}%
    % Now back at starting point
    \pgfpathclose%
  }
}


\pgfdeclareshape{clipped rectangle}{%
  % Inherit anchors from rectangle
  \inheritsavedanchors[from=rectangle]
  \inheritanchor[from=rectangle]{center}
  \inheritanchor[from=rectangle]{north}
  \inheritanchor[from=rectangle]{south}
  \inheritanchor[from=rectangle]{east}
  \inheritanchor[from=rectangle]{west}
  \inheritanchor[from=rectangle]{north east}
  \inheritanchor[from=rectangle]{north west}
  \inheritanchor[from=rectangle]{south east}
  \inheritanchor[from=rectangle]{south west}
  
  % Background path
  \backgroundpath{%
    % Get NESW coordinates
    \setmy@NEWSC
    \setmy@halves
    % Get stub radius
    \pgfmathsetlength\my@stubradius{\pgfkeysvalueof{/tikz/stub radius}}%
    % Check if stub radius is too large
    \ifdim\my@stubradius>\my@halfwidth
      \pgferror{stub radius (\the\my@stubradius) is larger than half the width (\the\my@halfwidth)}%
    \fi
    \ifdim\my@stubradius>\my@halfheight
      \pgferror{stub radius (\the\my@stubradius) is larger than half the height (\the\my@halfheight)}%
    \fi
    % Draw the path with cut corners
    % Start at bottom edge, after SW corner bite
    \pgfpathmoveto{\pgfpoint{\my@W+\my@stubradius}{\my@S}}%
    % Line to SE corner bite start
    \pgfpathlineto{\pgfpoint{\my@E-\my@stubradius}{\my@S}}%
    \pgfpathlineto{\pgfpoint{\my@E}{\my@S+\my@stubradius}}%
    \pgfpathlineto{\pgfpoint{\my@E}{\my@N-\my@stubradius}}%
    \pgfpathlineto{\pgfpoint{\my@E-\my@stubradius}{\my@N}}%
    \pgfpathlineto{\pgfpoint{\my@W+\my@stubradius}{\my@N}}%
    \pgfpathlineto{\pgfpoint{\my@W}{\my@N-\my@stubradius}}%
    \pgfpathlineto{\pgfpoint{\my@W}{\my@S+\my@stubradius}}%
    \pgfpathclose%
  }
}


%% Now I'd like you to define a shape "decorated stub rectangle",
%% which should inherit from "stub rectangle." It should use
%% \beforebackgroundpath to draw the following:
%%
%%  - Inside the bounding box by a distance of one-third the stub
%%    radius, a rectangle "A" drawn with a line thickness of 0.5pt.
%%
%%  - Inside that rectangle "A" by the same distance, along only the east and west edges, a
%%    line drawn with a thickness of 0.3 points.  This line should
%%    extend not the full length of the edge, but a distance 1.5x the
%%    stub radius from both top and bottom.
%%
%%  - Inside each corner of rectangle "A", a quarter circle.



\newdimen\my@inset
\newdimen\my@cornerradius

% Now define decorated stub rectangle
\pgfdeclareshape{decorated stub rectangle}{%
  % Inherit everything from stub rectangle
  \inheritsavedanchors[from=stub rectangle]
  \inheritanchor[from=stub rectangle]{center}
  \inheritanchor[from=stub rectangle]{north}
  \inheritanchor[from=stub rectangle]{south}
  \inheritanchor[from=stub rectangle]{east}
  \inheritanchor[from=stub rectangle]{west}
  \inheritanchor[from=stub rectangle]{north east}
  \inheritanchor[from=stub rectangle]{north west}
  \inheritanchor[from=stub rectangle]{south east}
  \inheritanchor[from=stub rectangle]{south west}
  \inheritbackgroundpath[from=stub rectangle]
  
  % Add decorations before the background
  \beforebackgroundpath{%
    % Get coordinates and stub radius
    \setmy@NEWSC
    \pgfmathsetlength\my@stubradius{\pgfkeysvalueof{/tikz/stub radius}}%
    % Calculate inset (one-third of stub radius)
    \my@inset=\my@stubradius
    \divide\my@inset by 3
    % Calculate corner radius for quarter circles
    \my@cornerradius=\my@inset
    
    % Draw rectangle A (inset by one-third stub radius)
    \pgfsetlinewidth{0.5pt}%
    \pgfpathrectangle{\pgfpoint{\my@W+\my@inset}{\my@S+\my@inset}}%
                     {\pgfpoint{\my@E-\my@W-2\my@inset}{\my@N-\my@S-2\my@inset}}%
    \pgfusepath{stroke}%
    
    % Draw east and west edge lines
    \pgfsetlinewidth{0.3pt}%
    \pgfmathsetlength\my@cornerradius{1.0*\my@stubradius}%
    % West edge line
    \pgfpathmoveto{\pgfpoint{\my@W+2\my@inset}{\my@S+\my@inset+\my@cornerradius}}%
    \pgfpathlineto{\pgfpoint{\my@W+2\my@inset}{\my@N-\my@inset-\my@cornerradius}}%
    % East edge line
    \pgfpathmoveto{\pgfpoint{\my@E-2\my@inset}{\my@S+\my@inset+\my@cornerradius}}%
    \pgfpathlineto{\pgfpoint{\my@E-2\my@inset}{\my@N-\my@inset-\my@cornerradius}}%
    \pgfusepath{stroke}%
    
    % Draw quarter circles in corners of rectangle A
    \pgfsetlinewidth{0.5pt}%
    % SW corner quarter circle
    \pgfpathmoveto{\pgfpoint{\my@W+\my@inset+\my@inset}{\my@S+\my@inset}}%
    \pgfpatharc{0}{90}{\my@inset}%
    \pgfusepath{stroke}%
    % SE corner quarter circle
    \pgfpathmoveto{\pgfpoint{\my@E-\my@inset}{\my@S+\my@inset+\my@inset}}%
    \pgfpatharc{90}{180}{\my@inset}%
    \pgfusepath{stroke}%
    % NE corner quarter circle
    \pgfpathmoveto{\pgfpoint{\my@E-\my@inset-\my@inset}{\my@N-\my@inset}}%
    \pgfpatharc{180}{270}{\my@inset}%
    \pgfusepath{stroke}%
    % NW corner quarter circle
    \pgfpathmoveto{\pgfpoint{\my@W+\my@inset}{\my@N-\my@inset-\my@inset}}%
    \pgfpatharc{270}{360}{\my@inset}%
    \pgfusepath{stroke}%
  }
}

% Now define decorated rectangle
\pgfdeclareshape{decorated clipped rectangle}{%
  % Inherit everything from clipped rectangle
  \inheritsavedanchors[from=clipped rectangle]
  \inheritanchor[from=clipped rectangle]{center}
  \inheritanchor[from=clipped rectangle]{north}
  \inheritanchor[from=clipped rectangle]{south}
  \inheritanchor[from=clipped rectangle]{east}
  \inheritanchor[from=clipped rectangle]{west}
  \inheritanchor[from=clipped rectangle]{north east}
  \inheritanchor[from=clipped rectangle]{north west}
  \inheritanchor[from=clipped rectangle]{south east}
  \inheritanchor[from=clipped rectangle]{south west}
  \inheritbackgroundpath[from=clipped rectangle]
  
  % Add decorations before the background
  \beforebackgroundpath{%
    % Get coordinates and stub radius
    \setmy@NEWSC
    \pgfmathsetlength\my@stubradius{\pgfkeysvalueof{/tikz/stub radius}}%
    % Calculate inset (one-third of stub radius)
    \my@inset=1.6\my@stubradius
    %
    %
    % Draw quarter circles in corners of rectangle A
    \pgfsetlinewidth{0.5pt}%
    % NW corner curve
    \begingroup
      \def\NW{%
        \pgfpathmoveto{\pgfpoint{\my@W}{\my@N-\my@inset}}%
        \pgfpathquadraticcurveto
            {\pgfpoint{\my@W+0.25\my@inset}{\my@N-0.25\my@inset}}
            {\pgfpoint{\my@W+\my@inset}{\my@N}}%
      }
      \def\SW{
        \pgfpathmoveto{\pgfpoint{\my@W}{\my@S+\my@inset}}%
        \pgfpathquadraticcurveto
            {\pgfpoint{\my@W+0.25\my@inset}{\my@S+0.25\my@inset}}
            {\pgfpoint{\my@W+\my@inset}{\my@S}}%
      }

      \NW
      \pgfusepath{stroke}%
      \SW
      \pgfusepath{stroke}%
%
%      \def\vertical{%
%         \pgfpathmoveto{\pgfpoint{}{\my@S}}
%         \pgfpathlineto{\pgfpoint{\my@W+0.15\my@inset}{\my@N}}
%      }
%      \pgfintersectionofpaths{\NW}{\vertical}
%      \pgfpointintersectionsolution{1}
%      \typeout{west solution x=\the\pgf@x}
%      \my@ya=\pgf@y  % X coordinate is bogus, dunno why
%      \pgfpathcircle{\pgfpointintersectionsolution{1}\typeout{west circle y=\the\pgf@y}}{2pt}\pgfusepath{stroke}
%      \pgfintersectionofpaths{\SW}{\vertical}
%      \pgfpointintersectionsolution{1}
%      \my@yb=\pgf@y  % X coordinate is bogus, dunno why
%      \typeout{west=\the\my@W, north=\the\my@N, inter=(\the\pgf@x,\the\pgf@y)}
%      \typeout{west:  high y=\the\my@ya, low y=\the\my@yb, south=\the\my@S}
%      \pgfpathmoveto{\pgfpoint{\my@W+0.15\my@inset}{\my@ya}}
%      \pgfpathlineto{\pgfpoint{\my@W+0.15\my@inset}{\my@yb}}
%      \pgfusepath{stroke}%
%      
      % Northeast
      \pgfpathmoveto{\pgfpoint{\my@E}{\my@N-\my@inset}}%
      \pgfpathquadraticcurveto
          {\pgfpoint{\my@E-0.25\my@inset}{\my@N-0.25\my@inset}}
          {\pgfpoint{\my@E-\my@inset}{\my@N}}%
      \pgfusepath{stroke}%

      % Southeast
      \pgfpathmoveto{\pgfpoint{\my@E}{\my@S+\my@inset}}%
      \pgfpathquadraticcurveto
          {\pgfpoint{\my@E-0.25\my@inset}{\my@S+0.25\my@inset}}
          {\pgfpoint{\my@E-\my@inset}{\my@S}}%
      \pgfusepath{stroke}%

      % EW decorations

      \pgfmathsetlength{\my@xa}{\my@E-0.15\my@inset}
      \pgfpathmoveto{\pgfpoint{\my@xa}{\my@N-1.05\my@stubradius}}
      \pgfpathlineto{\pgfpoint{\my@xa}{\my@S+1.05\my@stubradius}}
      \pgfusepath{stroke}%

      \pgfmathsetlength{\my@xa}{\my@W+0.15\my@inset}
      \pgfpathmoveto{\pgfpoint{\my@xa}{\my@N-1.05\my@stubradius}}
      \pgfpathlineto{\pgfpoint{\my@xa}{\my@S+1.05\my@stubradius}}
      \pgfusepath{stroke}%

    \endgroup


  }
}
