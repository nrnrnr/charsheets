#!/usr/bin/env lua5.1
--------------------------------------------------------------------------
-- yaml-to-dndtex.lua   ‒  Convert character-sheet YAML to LaTeX macros
-- Usage:   lua yaml-to-dndtex.lua  file.yaml   > file.tex
--          cat file.yaml | lua yaml-to-dndtex.lua   > file.tex
--------------------------------------------------------------------------

------------------ classic print functions ---------------------
local stringf = string.format
local function printf(...) return io.stdout:write(stringf(...)) end
local function eprintf(...) return io.stderr:write(stringf(...)) end
local function fprintf(fd, ...) return fd:write(stringf(...)) end
local function dief(...) eprintf(...); os.exit(1) end
local function errorf(...) return error(stringf(...)) end
local function runf(...) return os.execute(stringf(...)) end
local function outf(out, ...)
  table.insert(out, stringf(...))
  return out
end
----------------------------------------------------------------

local fields = require 'flags'.parser()
  :bool('standalone as s'):help('emit just definitions, not full file')
  :output_file('output as o'):help('where to write if not stdout')
  :string('type as t', 'silverpine'):help('template for character sheet')
  :bool('verbose as v')
  :bool('incomplete as i'):help('character sheet is not yet complete')
  :bool('quiet as q'):help('suppress stdout from pdflatex')
  :string('templates', os.getenv 'CHARSHEETS' or '/home/nr/etc/dnd/resources/character-sheets')
         :help('directory where character-sheet templates live') 
  :numarg(1)
  :parse(arg)

local vprintf = fields.verbose and eprintf or function() end

local pdflatex =
  fields.quiet and 'pdflatex -interaction=nonstopmode -halt-on-error -file-line-error'
    or 'pdflatex -interaction=scrollmode'



local lyaml  = require "lyaml"

-- -----------------------------------------------------------------------
-- 0.  Make sure we have a load_all() helper
-- -----------------------------------------------------------------------
local yaml_load_all
if lyaml.load_all then
  yaml_load_all = lyaml.load_all          -- native API present
else
  -- Fallback: wrap single-document loader so we still return a list
  yaml_load_all = function(str)
    local ok, doc = pcall(lyaml.load, str)
    if not ok then
      error("lyaml.load failed: "..tostring(doc))
    end
    return { doc }
  end
end

---------------------------------------------------------------------------
-- 1. TeX-escaping utility
---------------------------------------------------------------------------
local tex_escape_map = {
--  ["\\"] = [[\textbackslash{}]],
  [' '] = '~',
  ["&"]  = [[\&]],
  ["%"]  = [[\%]],
  ["$"]  = [[\$]],
  ["#"]  = [[\#]],
  ["_"]  = [[\_]],
--  ["{"]  = [[\{]],
--  ["}"]  = [[\}]],
  ["~"]  = [[\textasciitilde{}]],
  ["^"]  = [[\textasciicircum{}]],
}

local minustab = { ['-'] = [[\textminus]] }

local function escape (s)
  return (tostring(s):gsub("[\\&%%$#_{}~^]", tex_escape_map)
                     :gsub('([%s%d])%-(%d)', [[%1\textminus%2]])
                     :gsub("−", [[\textminus{}]])
  )
end

---------------------------------------------------------------------------
-- 2. Canonical key order for ATTACK records
---------------------------------------------------------------------------
local ATTACK_ORDER = { "NAME", "ATTACK", "DAMAGE", "TYPE", "RANGE", "AMMO" }
local ATTACK_INDEX = {}
for i,k in ipairs(ATTACK_ORDER) do ATTACK_INDEX[k] = i end

local function keys_in_canonical_order (record, canon_index)
  local ordered, extras = {}, {}
  for k in pairs(record) do
    if canon_index[k] then
      table.insert(ordered, k)
    else
      table.insert(extras, k)
    end
  end
  table.sort(ordered, function(a,b) return canon_index[a] < canon_index[b] end)
  table.sort(extras)
  for _,k in ipairs(extras) do table.insert(ordered, k) end
  return ordered
end

local function keyformat(key)
  return (key:gsub('%&', '+'))
end

---------------------------------------------------------------------------
-- 3. Rendering helpers
---------------------------------------------------------------------------
local function render_simple_kv (key, val)
  local fontbase = key:match('(.*) FONT$')
  if fontbase then
    return ([[\setDNDfont{%s}{%s}]]):format(keyformat(fontbase), escape(val))
  else
    return ([[\setDND{%s}{%s}]]):format(keyformat(key), escape(val))
  end
end

local function is_empty_table(v)
  return type(v) == 'table' and next(v) == nil
end

local function render(v)
  if type(v) == 'string' then
    return escape(v)
  elseif type(v) ~= 'table' then
    return tostring(v)
  else
    if v.proficiencies_skip then
      return [[\profskip{}]]
    elseif v.smallskip then
      return [[\smallskip{}]]
    elseif v.medskip then
      return [[\medskip{}]]
    elseif v.Languages then
      return v.Languages
    elseif v.Armor then
      return string.format('%s Armor', v.Armor)
    elseif v.Weapons then
      return string.format('%s Weapons', v.Weapons)
    else
      return 'whut?: ' .. (require 'inspect'.image(v))
    end
  end
end

local function render_item(v)
  if is_empty_table(v) then -- blank list entry
    return [[\profskip{}]]
  else
    local s = render(v)
    if s:find [[\profskip]] or s:find [[\medskip]] or s:find [[\smallskip]]
    or s:find [[\bigskip]]
    then
      return s
    else
      return ([[\item %s]]):format(s)
    end
  end
end

local function render_item_list (key, list)
  local items = {}
  for _,v in ipairs(list) do
    table.insert(items, render_item(v))
  end
  return ([[\setDND{%s}{%s}]]):format(keyformat(key), table.concat(items, "\n"))
end

local function render_attack_record (rec)
  local parts = {}
  for _,k in ipairs(keys_in_canonical_order(rec, ATTACK_INDEX)) do
--    require 'inspect'.show { k = k, field = rec[k] or 'nil' }
    outf(parts, "%s={%s}", escape(k), escape(rec[k] or ""))
  end
  return ([[\dndkeys{%s}]]):format(table.concat(parts, ","))
end

local function render_generic_record (rec)
  local parts = {}
  for k,v in pairs(rec) do
    outf(parts, "%s={%s}", escape(k), escape(v))
  end
  table.sort(parts)
  return ([[\dndkeys{%s}]]):format(table.concat(parts, ","))
end

local function note(elem)
  return elem.NOTE  and elem.NOTE :find '%S' and elem.NOTE or
         elem.NOTES and elem.NOTES:find '%S' and elem.NOTES
end



local function render_struct_list (key, list)
  vprintf('rendering struct for %s\n', key)
  local out = {}
  local notes_header_out = false
  for _,elem in ipairs(list) do
    if type(elem) ~= "table" then
      outf(out, [[\item %s]], escape(tostring(elem)))
    elseif elem.level and not next(elem, 'level') then
      if type(elem.level) == 'table' then
        outf(out, [[\multicolumn2{@{}l@{}}{\spellslevel[%s]{%s}}\\]], elem.level.slots, elem.level.number)
      else
        outf(out, [[\multicolumn2{@{}l@{}}{\spellslevel{%s}}\\]], escape(elem.level))
      end
    elseif elem.name and elem.description and not elem.ATTACK
        or key == 'MAGIC'
    then
      outf(out, [[\described{%s}{%s}]],
           escape(elem.name or ''), escape(elem.description or ''))
    elseif elem.ATTACK then
      vprintf('rendering an attack\n')
      table.insert(out, render_attack_record(elem))
    else
      table.insert(out, render_generic_record(elem))
    end
  end
  for _,elem in ipairs(list) do
    if elem.ATTACK and note(elem) then
      if not notes_header_out then
        table.insert(out, [[\notesheader]])
        notes_header_out = true
      end
      outf(out, [[\attacknote{%s}{%s}]], elem.NAME, note(elem))
    end
  end

  return ([[\setDND{%s}{%s}]]):format(keyformat(key), table.concat(out, "%\n"))
end

---------------------------------------------------------------------------
-- 4. Convert a single YAML mapping to LaTeX lines
---------------------------------------------------------------------------
local function convert_mapping (map)
  local lines = {}

  -- Incomplete character support
  if fields.incomplete then
    table.insert(lines, [[\completefalse]])
  end

  -- Proficiency bonus (strip key after processing)
  local prof = map["PROFICIENCY BONUS"] or map["Proficiency Bonus"]
  if prof and tostring(prof):find('%S') then
    local txt = tostring(prof)
    if not txt:match("^[+-]") then txt = "0"..txt end
    outf(lines, [[\setcounter{proficiency bonus}{%s}]], escape(txt))
  else
    -- Compute proficiency bonus from level if available
    local level = tonumber(map.LEVEL)
    if level then
      local computed_prof = 2 + math.floor((level - 1) / 4)
      outf(lines, [[\setcounter{proficiency bonus}{%d}]], computed_prof)
    elseif fields.incomplete then
      -- Default to +2 for incomplete characters when no level or proficiency bonus
      outf(lines, [[\setcounter{proficiency bonus}{2}]])
    end
  end

  -- Iterate in original order if lyaml preserved it (omap style)
  local keys = {}
  if map.n and map[1] and type(map[1])=="table" and map[1][1] then
    for i=1,map.n do table.insert(keys, map[i][1]) end
  else
    for k in pairs(map) do table.insert(keys, k) end
    table.sort(keys)               -- fallback: deterministic but arbitrary
  end

  for _,k in ipairs(keys) do
    if k ~= "PROFICIENCY BONUS" and k ~= "Proficiency Bonus" then
      local v = map[k]
      local t = type(v)
      if k == "EQUIPMENT" and t == "table" and not (#v > 0 and (type(v[1])=="string" or type(v[1])=="number")) then
        -- Handle new categorized equipment format
        local flattened_equipment = {}
-- xxx needs a fix
--        local equipment_categories = {
--          "HEAVY WEAPONS", "NORMAL WEAPONS", "LIGHT WEAPONS",
--          "HEAVY ARMOR", "NORMAL ARMOR", "LIGHT ARMOR",
--          "HEAVY ITEMS",
--          "SLOTTED ITEMS", "FREE ITEMS", 
--          "SHIELDS",
--        }
        
        -- Process categorized equipment format
        for category, items in pairs(v) do
          if type(items) == "table" and #items > 0 then
            for _,equipment_item in ipairs(items) do
              local weight_arg = ""
              
              -- Parse weight from heavy items like "Meteor iron (4 stones)"
              if category == "HEAVY ITEMS" then
                local stones = equipment_item:match("%((%d+) stones?%)")
                if stones then
                  weight_arg = string.format("[%d]", tonumber(stones) * 10)
                end
              end
              
              table.insert(lines, string.format("\\addDNDitem%s{%s}{%s}", 
                weight_arg, category:gsub('&', '+'), escape(equipment_item)))
              table.insert(flattened_equipment, render_item(equipment_item))
            end
          end
        end
        
        -- Emit flattened equipment list
        if #flattened_equipment > 0 then
          table.insert(lines, string.format("\\setDND{EQUIPMENT}{%s}", 
            table.concat(flattened_equipment, "\n")))
        else
          -- Empty equipment list for new format
          table.insert(lines, "\\setDND{EQUIPMENT}{}")
        end
      elseif t=="string" or t=="number" or t=="boolean" then
        table.insert(lines, render_simple_kv(k, tostring(v)))
      elseif t=="table" then
        if #v > 0 and (type(v[1])=="string" or type(v[1])=="number") then
          table.insert(lines, render_item_list(k, v))
        else
          table.insert(lines, render_struct_list(k, v))
        end
      end
    end
  end
  return table.concat(lines, "\n")
end

---------------------------------------------------------------------------
-- 5. Entry point
---------------------------------------------------------------------------
local function slurp(filename)
  if filename == '-' or filename == '.' or not filename then
    return io.stdin:read("*a")
  else
    local f = assert(io.open(filename, "r"))
    local txt = f:read("*a"); f:close(); return txt
  end
end

local saving_throw_proficiencies = {
  Barbarian = { "Strength", "Constitution" },
  Bard      = { "Dexterity", "Charisma" },
  Cleric    = { "Wisdom", "Charisma" },
  Druid     = { "Intelligence", "Wisdom" },
  Fighter   = { "Strength", "Constitution" },
  Monk      = { "Strength", "Dexterity" },
  Paladin   = { "Wisdom", "Charisma" },
  Ranger    = { "Strength", "Dexterity" },
  Rogue     = { "Dexterity", "Intelligence" },
  Sorcerer  = { "Constitution", "Charisma" },
  Warlock   = { "Wisdom", "Charisma" },
  Wizard    = { "Intelligence", "Wisdom" }
}


local function extend(doc)
  local class = doc.CLASS or (doc['CLASS & LEVEL'] or ''):match '%a+' or ''
  doc.CLASS = class
  
  -- Extract SPECIALTY from "CLASS & LEVEL" if SPECIALTY is absent
  if not doc.SPECIALTY and doc['CLASS & LEVEL'] then
    doc.SPECIALTY = doc['CLASS & LEVEL']:match '%a+%s*%(([^)]+)%)'
  end
  
  -- Extract LEVEL from "CLASS & LEVEL" if LEVEL is absent
  doc.LEVEL = doc.LEVEL or
              doc['CLASS & LEVEL'] and doc['CLASS & LEVEL']:match '%d+%s*$' or
              nil
  
  -- Only build "CLASS & LEVEL" if we have separate CLASS/LEVEL/SPECIALTY fields
  if doc.CLASS and doc.LEVEL and not doc['CLASS & LEVEL'] then
    if doc.SPECIALTY and doc.SPECIALTY:find '%S' then
      doc['CLASS & LEVEL'] = stringf('%s (%s) %s', class, doc.SPECIALTY, doc.LEVEL)
    else
      doc['CLASS & LEVEL'] = stringf('%s %s', class, doc.LEVEL)
    end
  end
  
  local p = saving_throw_proficiencies[class]
  if p then
    for _, prof in ipairs(p) do
      doc[stringf('%s SAVING', prof:sub(1,3):upper())] = true
    end
  end
  
  return doc
end

local function contents(filename)
  local f, msg = io.open(filename, 'r')
  if not f then return f, msg end
  local s, msg = f:read '*a'
  if not s then return s, string.format('%s: %s', filename, msg) end
  f:close()
  return s
end

local function set_contents(filename, s)
  local f, msg = io.open(filename, 'w')
  if not f then return f, msg end
  local s = assert(f:write(s))
  f:close()
  return s or true
end

local quote_me = '[^%w%+%-%=%@%_%/%.%:]' -- easier to complement what doesn't need quotes
local strfind = string.find

local function dirname(s) -- also returns basename as second result
  s = s:gsub('/$', '')
  local dir, base = s:match '^(.*)/([^/]*)$'
  if not dir then
    return '.', s
  elseif dir == '' then
    return '/', base
  else
    return dir, base
  end
end


function osquote(s)
  -- Returns string s with whatever markup is needed to quote it 
  -- to the POSIX shell.

  if strfind(s, quote_me) or s == '' then
    return "'" .. string.gsub(s, "'", [['"'"']]) .. "'"
  else
    return s
  end
end

local function fill_template(assignments)
  local pathname = stringf('%s/%s.tex', fields.templates, fields.type)
  local template, msg = contents(pathname)
  if not template then
    eprintf('%s\n', msg)
    os.exit(1)
  else
    local bracketed_splash = stringf('{%s/splash.png}', fields.templates)
    return (template:gsub('\n%s*\\input%b{}', assignments)
                    :gsub('%{splash.png%}', bracketed_splash)
           )
  end
end

local function emit(assignments)
  local output = fields.standalone and assignments or fill_template(assignments)

  if not fields.output then
    io.stdout:write(assignments, '\n')
  elseif fields.output:find '%.tex$' then
    set_contents(fields.output, output)
  elseif fields.output:find '%.pdf$' then
    local tex = fields.output:gsub('%.pdf$', '.tex')
    set_contents(tex, output)
    local rc = runf('%s -output-directory %s %s',
                    pdflatex, osquote(dirname(fields.output)), osquote(tex))
    if rc ~= 0 then
      os.exit(rc)
    end
  end
end

local main = function(arg)
  local yaml_text = slurp(arg[1])
  for _,doc in ipairs(yaml_load_all(yaml_text)) do
    if type(doc) == 'string' then
      eprintf("YAML loaded as string %q.\n", doc)
      os.exit(1)
    end
    extend(doc)
    if type(doc)=="table" then
      emit(convert_mapping(doc))
    end
  end
end


main(arg)
